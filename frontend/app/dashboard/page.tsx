



"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  MapPin,
  Thermometer,
  Droplets,
  Wind,
  Sun,
  Sprout,
  TrendingUp,
  Calendar,
  AlertTriangle,
  BarChart3,
} from "lucide-react"
import VoiceChatbot from "@/components/voice-chatbot"
import CropAnalytics from "@/components/crop-analytics"

// ЁЯМН Location + crop + weather data for each language

// const locationData: Record<string, any> = {
//   hi: { location: "рджрд┐рд▓реНрд▓реА, рднрд╛рд░рдд", weather: { temp: "28┬░C", humidity: "65%", wind: "12 km/h", condition: "рдзреВрдк" }, crops: ["рдЧреЗрд╣реВрдВ", "рдзрд╛рди", "рдордХреНрдХрд╛"] },
//   en: { location: "Delhi, India", weather: { temp: "28┬░C", humidity: "65%", wind: "12 km/h", condition: "Sunny" }, crops: ["Wheat", "Rice", "Maize"] },
//   bn: { location: "ржврж╛ржХрж╛, ржмрж╛ржВрж▓рж╛ржжрзЗрж╢", weather: { temp: "26┬░C", humidity: "72%", wind: "10 km/h", condition: "рж░рзМржжрзНрж░рзЛржЬрзНржЬрзНржмрж▓" }, crops: ["ржзрж╛ржи", "ржЧржо", "ржнрзБржЯрзНржЯрж╛"] },
//   te: { location: "р░╣р▒Ир░жр░░р░╛р░мр░╛р░жр▒Н, р░нр░╛р░░р░др░жр▒Зр░╢р░В", weather: { temp: "30┬░C", humidity: "60%", wind: "15 km/h", condition: "р░Ор░Вр░б" }, crops: ["р░мр░┐р░пр▒Нр░пр░В", "р░Чр▒Лр░зр▒Бр░ор░▓р▒Б", "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и"] },
//   ta: { location: "роЪрпЖройрпНройрпИ, роЗроирпНродро┐ропро╛", weather: { temp: "32┬░C", humidity: "70%", wind: "14 km/h", condition: "ро╡рпЖропро┐ро▓рпН" }, crops: ["роЕро░ро┐роЪро┐", "роХрпЛродрпБроорпИ", "роЪрпЛро│роорпН"] },
//   mr: { location: "рдкреБрдгреЗ, рднрд╛рд░рдд", weather: { temp: "29┬░C", humidity: "68%", wind: "11 km/h", condition: "рд╕реВрд░реНрдпрдкреНрд░рдХрд╛рд╢" }, crops: ["рддрд╛рдВрджреВрд│", "рдЧрд╣реВ", "рдордХрд╛"] },
//   gu: { location: "ркЕркоркжрк╛рк╡рк╛ркж, ркнрк╛рк░ркд", weather: { temp: "31┬░C", humidity: "62%", wind: "13 km/h", condition: "ркзрлБрккркЫрк╛ркВрк╡" }, crops: ["ркЪрлЛркЦрк╛", "ркЧрк╣рлБркВ", "ркоркХрк╛ркИ"] },
//   kn: { location: "р▓мр│Жр▓Вр▓Чр▓│р│Вр▓░р│Б, р▓нр▓╛р▓░р▓д", weather: { temp: "27┬░C", humidity: "75%", wind: "9 km/h", condition: "р▓мр▓┐р▓╕р▓┐р▓▓р│Б" }, crops: ["р▓Ер▓Хр│Нр▓Хр▓┐", "р▓Чр│Лр▓зр▓┐", "р▓ор│Жр▓Хр│Нр▓Хр│Жр▓Ьр│Лр▓│"] },
// }

  // ЁЯМН Language-specific mock data
  const locationData: Record<string, any> = {
    hi: {
      location: "рджрд┐рд▓реНрд▓реА, рднрд╛рд░рдд",
      weather: { temp: "28┬░C", humidity: "65%", wind: "12 km/h", condition: "рдзреВрдк" },
      crops: ["рдЧреЗрд╣реВрдВ", "рдзрд╛рди", "рдордХреНрдХрд╛", "рд╕рд░рд╕реЛрдВ", "рдЧрдиреНрдирд╛", "рдЬреНрд╡рд╛рд░"],
    },
    en: {
      location: "Delhi, India",
      weather: { temp: "28┬░C", humidity: "65%", wind: "12 km/h", condition: "Sunny" },
      crops: ["Wheat", "Rice", "Maize", "Mustard", "Sugarcane", "Sorghum"],
    },
    bn: {
      location: "ржврж╛ржХрж╛, ржмрж╛ржВрж▓рж╛ржжрзЗрж╢",
      weather: { temp: "26┬░C", humidity: "72%", wind: "10 km/h", condition: "рж░рзМржжрзНрж░рзЛржЬрзНржЬрзНржмрж▓" },
      crops: ["ржзрж╛ржи", "ржЧржо", "ржнрзБржЯрзНржЯрж╛", "ржкрж╛ржЯ", "ржЖржЦ", "рж╕рж░рж┐рж╖рж╛"],
    },
    te: {
      location: "р░╣р▒Ир░жр░░р░╛р░мр░╛р░жр▒Н, р░нр░╛р░░р░др░жр▒Зр░╢р░В",
      weather: { temp: "30┬░C", humidity: "60%", wind: "15 km/h", condition: "р░Ор░Вр░б" },
      crops: ["р░мр░┐р░пр▒Нр░пр░В", "р░Чр▒Лр░зр▒Бр░ор░▓р▒Б", "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и", "р░кр░др▒Нр░др░┐", "р░Ър▒Жр░░р░Хр▒Б", "р░Ьр▒Кр░ир▒Нр░и"],
    },
    ta: {
      location: "роЪрпЖройрпНройрпИ, роЗроирпНродро┐ропро╛",
      weather: { temp: "32┬░C", humidity: "70%", wind: "14 km/h", condition: "ро╡рпЖропро┐ро▓рпН" },
      crops: ["роЕро░ро┐роЪро┐", "роХрпЛродрпБроорпИ", "роЪрпЛро│роорпН", "роХро░рпБроорпНрокрпБ", "рокро░рпБродрпНродро┐", "роЪрпЛропро╛рокрпАройрпН"],
    },
    mr: {
      location: "рдкреБрдгреЗ, рднрд╛рд░рдд",
      weather: { temp: "29┬░C", humidity: "68%", wind: "11 km/h", condition: "рд╕реВрд░реНрдпрдкреНрд░рдХрд╛рд╢" },
      crops: ["рддрд╛рдВрджреВрд│", "рдЧрд╣реВ", "рдордХрд╛", "рдКрд╕", "рд╕реЛрдпрд╛рдмреАрди", "рдХрд╛рдкреВрд╕"],
    },
    gu: {
      location: "ркЕркоркжрк╛рк╡рк╛ркж, ркнрк╛рк░ркд",
      weather: { temp: "31┬░C", humidity: "62%", wind: "13 km/h", condition: "ркзрлБрккркЫрк╛ркВрк╡" },
      crops: ["ркЪрлЛркЦрк╛", "ркЧрк╣рлБркВ", "ркоркХрк╛ркИ", "ркХрккрк╛рк╕", "рк╢рлЗрк░ркбрлА", "ркЬрлНрк╡рк╛рк░"],
    },
    kn: {
      location: "р▓мр│Жр▓Вр▓Чр▓│р│Вр▓░р│Б, р▓нр▓╛р▓░р▓д",
      weather: { temp: "27┬░C", humidity: "75%", wind: "9 km/h", condition: "р▓мр▓┐р▓╕р▓┐р▓▓р│Б" },
      crops: ["р▓Ер▓Хр│Нр▓Хр▓┐", "р▓Чр│Лр▓зр▓┐", "р▓ор│Жр▓Хр│Нр▓Хр│Жр▓Ьр│Лр▓│", "р▓╣р▓др│Нр▓др▓┐", "р▓Хр▓мр│Нр▓мр│Б", "р▓Ьр│Лр▓│"],
    },
  }


// const locationData: Record<
//   string,
//   { location: string; crops: string[]; weather: { temp: string; humidity: string; wind: string; condition: string } }
// > = {
//   hi: {
//     location: "рдкрдВрдЬрд╛рдм, рднрд╛рд░рдд",
//     crops: ["рдЧреЗрд╣реВрдВ", "рдзрд╛рди", "рдордХреНрдХрд╛", "рдХрдкрд╛рд╕", "рдЧрдиреНрдирд╛"],
//     weather: { temp: "28┬░C", humidity: "65%", wind: "12 km/h", condition: "рдзреВрдк" },
//   },
//   en: {
//     location: "Punjab, India",
//     crops: ["Wheat", "Rice", "Corn", "Cotton", "Sugarcane"],
//     weather: { temp: "28┬░C", humidity: "65%", wind: "12 km/h", condition: "Sunny" },
//   },
//   bn: {
//     location: "ржкрж╢рзНржЪрж┐ржоржмржЩрзНржЧ, ржнрж╛рж░ржд",
//     crops: ["ржзрж╛ржи", "ржкрж╛ржЯ", "ржЖрж▓рзБ", "ржЧржо", "рж╕рж░рж┐рж╖рж╛"],
//     weather: { temp: "26┬░C", humidity: "78%", wind: "8 km/h", condition: "ржорзЗржШрж▓рж╛" },
//   },
//   te: {
//     location: "р░др▒Жр░▓р░Вр░Чр░╛р░г, р░нр░╛р░░р░др░жр▒Зр░╢р░В",
//     crops: ["р░мр░┐р░пр▒Нр░пр░В", "р░кр░др▒Нр░др░┐", "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и", "р░ор░┐р░░р░кр░Хр░╛р░п", "р░Ър▒Жр░░р░Хр▒Б"],
//     weather: { temp: "30┬░C", humidity: "60%", wind: "10 km/h", condition: "р░Ор░Вр░б" },
//   },
//   ta: {
//     location: "родрооро┐ро┤рпНроиро╛роЯрпБ, роЗроирпНродро┐ропро╛",
//     crops: ["роЕро░ро┐роЪро┐", "рокро░рпБродрпНродро┐", "роХро░рпБроорпНрокрпБ", "роЪрпЛро│роорпН", "рооро┐ро│роХро╛ропрпН"],
//     weather: { temp: "32┬░C", humidity: "70%", wind: "9 km/h", condition: "ро╡рпЖропро┐ро▓рпН" },
//   },
//   mr: {
//     location: "рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░, рднрд╛рд░рдд",
//     crops: ["рдЬреНрд╡рд╛рд░реА", "рдХрд╛рдкреВрд╕", "рдКрд╕", "рддреВрд░", "рд╕реЛрдпрд╛рдмреАрди"],
//     weather: { temp: "29┬░C", humidity: "68%", wind: "11 km/h", condition: "рд╕реВрд░реНрдпрдкреНрд░рдХрд╛рд╢" },
//   },
//   gu: {
//     location: "ркЧрлБркЬрк░рк╛ркд, ркнрк╛рк░ркд",
//     crops: ["ркХрккрк╛рк╕", "ркЬрлНрк╡рк╛рк░", "ркШркЙркВ", "ркмрк╛ркЬрк░рлА", "рк╢рк╛ркХркнрк╛ркЬрлА"],
//     weather: { temp: "31┬░C", humidity: "64%", wind: "13 km/h", condition: "ркзрлБрккрк╛рк│рлБркВ" },
//   },
//   kn: {
//     location: "р▓Хр▓░р│Нр▓ир▓╛р▓Яр▓Х, р▓нр▓╛р▓░р▓д",
//     crops: ["р▓Ер▓Хр│Нр▓Хр▓┐", "р▓Ьр│Лр▓│", "р▓Хр▓мр│Нр▓мр│Б", "р▓Хр▓╛р▓лр▓┐", "р▓╣р▓др│Нр▓др▓┐"],
//     weather: { temp: "27┬░C", humidity: "72%", wind: "10 km/h", condition: "р▓╕р│Вр▓░р│Нр▓пр▓и р▓мр│Жр▓│р▓Хр│Б" },
//   },
// }

export default function Dashboard() {
  const [selectedCrop, setSelectedCrop] = useState<string>("")
  const [location, setLocation] = useState<string>("")
  const [language, setLanguage] = useState<
    "hi" | "en" | "bn" | "te" | "ta" | "mr" | "gu" | "kn"
  >("en")
  const [locationPermission, setLocationPermission] = useState<"granted" | "denied" | "prompt">("prompt")
  const [activeTab, setActiveTab] = useState("overview")
  const router = useRouter()

  useEffect(() => {
    // Get language from URL params
    const urlParams = new URLSearchParams(window.location.search)
    const lang = (urlParams.get("lang") as typeof language) || "en"
    setLanguage(lang)

    // Request location permission
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setLocationPermission("granted")
          setLocation(`${position.coords.latitude.toFixed(2)}, ${position.coords.longitude.toFixed(2)}`)
        },
        () => {
          setLocationPermission("denied")
        },
      )
    }
  }, [])

  const handleLanguageChange = () => {
    router.push("/")
  }

  const currentData = locationData[language]

  // ЁЯМР UI text translations
  const labels: any = {
    hi: {
      changeLang: "рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ",
      overview: "рдЕрд╡рд▓реЛрдХрди",
      analytics: "рдПрдирд╛рд▓рд┐рдЯрд┐рдХреНрд╕",
      todayWeather: "рдЖрдЬ рдХрд╛ рдореМрд╕рдо",
      temp: "рддрд╛рдкрдорд╛рди",
      humidity: "рдирдореА",
      wind: "рд╣рд╡рд╛",
      condition: "рд╕реНрдерд┐рддрд┐",
      selectCrop: "рдЕрдкрдиреА рдлрд╕рд▓ рдЪреБрдиреЗрдВ",
      chooseCrop: "рдлрд╕рд▓ рдЪреБрдиреЗрдВ...",
      recFor: (crop: string) => `${crop} рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡`,
      rec1: "рдорд┐рдЯреНрдЯреА рдХреА рдирдореА рдмрдирд╛рдП рд░рдЦреЗрдВ",
      rec2: "рдирд┐рдпрдорд┐рдд рдирд┐рд░реАрдХреНрд╖рдг рдХрд░реЗрдВ",
      rec3: "рдЙрд░реНрд╡рд░рдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
      todayRecs: "рдЖрдЬ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",
      weatherAlert: "рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА",
      rain: "рдЕрдЧрд▓реЗ 3 рджрд┐рдиреЛрдВ рдореЗрдВ рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛",
      sowing: "рдмреБрдЖрдИ рдХрд╛ рд╕рдордп",
      wheatSowing: "рдЧреЗрд╣реВрдВ рдмреБрдЖрдИ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕рдордп",
      thisWeek: "рдЗрд╕ рд╕рдкреНрддрд╛рд╣",
      rainyDays: "рдмрд╛рд░рд┐рд╢ рдХреЗ рджрд┐рди",
      avgTemp: "рдФрд╕рдд рддрд╛рдкрдорд╛рди",
      soilMoisture: "рдорд┐рдЯреНрдЯреА рдХреА рдирдореА",
    },
    en: {
      changeLang: "Change Language",
      overview: "Overview",
      analytics: "Analytics",
      todayWeather: "Today's Weather",
      temp: "Temperature",
      humidity: "Humidity",
      wind: "Wind",
      condition: "Condition",
      selectCrop: "Select Your Crop",
      chooseCrop: "Choose a crop...",
      recFor: (crop: string) => `Recommendations for ${crop}`,
      rec1: "Maintain soil moisture",
      rec2: "Regular monitoring required",
      rec3: "Apply fertilizer as needed",
      todayRecs: "Today's Recommendations",
      weatherAlert: "Weather Alert",
      rain: "Rain expected in next 3 days",
      sowing: "Sowing Time",
      wheatSowing: "Optimal time for wheat sowing",
      thisWeek: "This Week",
      rainyDays: "Rainy Days",
      avgTemp: "Avg Temperature",
      soilMoisture: "Soil Moisture",
    },
    bn: {
      changeLang: "ржнрж╛рж╖рж╛ ржкрж░рж┐ржмрж░рзНрждржи",
      overview: "рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж┐ржмрж░ржг",
      analytics: "ржмрж┐рж╢рзНрж▓рзЗрж╖ржг",
      todayWeather: "ржЖржЬржХрзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛",
      temp: "рждрж╛ржкржорж╛рждрзНрж░рж╛",
      humidity: "ржЖрж░рзНржжрзНрж░рждрж╛",
      wind: "ржмрж╛рждрж╛рж╕",
      condition: "ржЕржмрж╕рзНржерж╛",
      selectCrop: "ржЖржкржирж╛рж░ ржлрж╕рж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
      chooseCrop: "ржлрж╕рж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи...",
      recFor: (crop: string) => `${crop} ржПрж░ ржЬржирзНржп ржкрж░рж╛ржорж░рзНрж╢`,
      rec1: "ржорж╛ржЯрж┐рж░ ржЖрж░рзНржжрзНрж░рждрж╛ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи",
      rec2: "ржирж┐ржпрж╝ржорж┐ржд ржкрж░рж┐ржжрж░рзНрж╢ржи ржХрж░рзБржи",
      rec3: "рж╕рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи",
      todayRecs: "ржЖржЬржХрзЗрж░ рж╕рзБржкрж╛рж░рж┐рж╢",
      weatherAlert: "ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рждрж░рзНржХрждрж╛",
      rain: "ржкрж░ржмрж░рзНрждрзА рзй ржжрж┐ржирзЗ ржмрзГрж╖рзНржЯрж┐рж░ рж╕ржорзНржнрж╛ржмржирж╛",
      sowing: "ржмржкржирзЗрж░ рж╕ржоржпрж╝",
      wheatSowing: "ржЧржорзЗрж░ ржЬржирзНржп ржЙржкржпрзБржХрзНржд ржмржкржирзЗрж░ рж╕ржоржпрж╝",
      thisWeek: "ржПржЗ рж╕ржкрзНрждрж╛рж╣рзЗ",
      rainyDays: "ржмрзГрж╖рзНржЯрж┐рж░ ржжрж┐ржи",
      avgTemp: "ржЧржбрж╝ рждрж╛ржкржорж╛рждрзНрж░рж╛",
      soilMoisture: "ржорж╛ржЯрж┐рж░ ржЖрж░рзНржжрзНрж░рждрж╛",
    },
    te: {
      changeLang: "р░нр░╛р░╖ р░ор░╛р░░р▒Нр░Ър░Вр░бр░┐",
      overview: "р░Ер░╡р░▓р▒Лр░Хр░ир░В",
      analytics: "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
      todayWeather: "р░Ир░░р▒Лр░Ьр▒Б р░╡р░╛р░др░╛р░╡р░░р░гр░В",
      temp: "р░Йр░╖р▒Нр░гр▒Лр░Чр▒Нр░░р░д",
      humidity: "р░Жр░░р▒Нр░жр▒Нр░░р░д",
      wind: "р░Чр░╛р░▓р░┐",
      condition: "р░╕р▒Нр░ер░┐р░др░┐",
      selectCrop: "р░ор▒А р░кр░Вр░Яр░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
      chooseCrop: "р░кр░Вр░Яр░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐...",
      recFor: (crop: string) => `${crop} р░Хр▒Лр░╕р░В р░╕р▒Вр░Ър░ир░▓р▒Б`,
      rec1: "р░ор░Яр▒Нр░Яр░┐ р░др▒Зр░ор░ир▒Б р░Йр░Вр░Ър░Вр░бр░┐",
      rec2: "р░Хр▒Нр░░р░ор░В р░др░кр▒Нр░кр░Хр▒Бр░Вр░бр░╛ р░кр░░р▒Нр░пр░╡р▒Зр░Хр▒Нр░╖р░┐р░Вр░Ър░Вр░бр░┐",
      rec3: "р░Ер░╡р░╕р░░р░ор▒Ир░др▒З р░Ор░░р▒Бр░╡р▒Бр░▓р▒Б р░╡р░╛р░бр░Вр░бр░┐",
      todayRecs: "р░Ир░░р▒Лр░Ьр▒Б р░╕р░┐р░лр░╛р░░р░╕р▒Бр░▓р▒Б",
      weatherAlert: "р░╡р░╛р░др░╛р░╡р░░р░г р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х",
      rain: "р░др░жр▒Бр░кр░░р░┐ 3 р░░р▒Лр░Ьр▒Бр░▓р▒Нр░▓р▒Л р░╡р░░р▒Нр░╖р░В р░Ер░╡р░Хр░╛р░╢р░В р░Йр░Вр░жр░┐",
      sowing: "р░╡р░┐р░др▒Нр░др░и р░╕р░ор░пр░В",
      wheatSowing: "р░Чр▒Лр░зр▒Бр░ор░▓ р░╡р░┐р░др▒Нр░др░ир░╛р░ир░┐р░Хр░┐ р░Ер░ир▒Бр░Хр▒Вр░▓ р░╕р░ор░пр░В",
      thisWeek: "р░И р░╡р░╛р░░р░В",
      rainyDays: "р░╡р░░р▒Нр░╖р░кр▒Б р░░р▒Лр░Ьр▒Бр░▓р▒Б",
      avgTemp: "р░╕р░Чр░Яр▒Б р░Йр░╖р▒Нр░гр▒Лр░Чр▒Нр░░р░д",
      soilMoisture: "р░ор░Яр▒Нр░Яр░┐ р░др▒Зр░о",
    },
    ta: {
      changeLang: "роорпКро┤ро┐ рооро╛ро▒рпНро▒рпБ",
      overview: "роорпЗро▓рпЛроЯрпНроЯроорпН",
      analytics: "рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
      todayWeather: "роЗройрпНро▒рпИроп ро╡ро╛ройро┐ро▓рпИ",
      temp: "ро╡рпЖрокрпНрокроиро┐ро▓рпИ",
      humidity: "роИро░рокрпНрокродроорпН",
      wind: "роХро╛ро▒рпНро▒рпБ",
      condition: "роиро┐ро▓рпИ",
      selectCrop: "роЙроЩрпНроХро│рпН рокропро┐ро░рпИродрпН родрпЗро░рпНро╡рпБроЪрпЖропрпНроХ",
      chooseCrop: "рокропро┐ро░рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН...",
      recFor: (crop: string) => `${crop} рокро░ро┐роирпНродрпБро░рпИроХро│рпН`,
      rec1: "роорогрпН роИро░рокрпНрокродродрпНродрпИ рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН",
      rec2: "родрпКроЯро░рпНроирпНродрпБ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН",
      rec3: "родрпЗро╡рпИропрпЖройро┐ро▓рпН роЙро░роЩрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН",
      todayRecs: "роЗройрпНро▒рпИроп рокро░ро┐роирпНродрпБро░рпИроХро│рпН",
      weatherAlert: "ро╡ро╛ройро┐ро▓рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИ",
      rain: "роЕроЯрпБродрпНрод 3 роиро╛роЯрпНроХро│ро┐ро▓рпН рооро┤рпИ ро╡ро╛ропрпНрокрпНрокрпБ",
      sowing: "ро╡ро┐родрпИрокрпНрокрпБ роирпЗро░роорпН",
      wheatSowing: "роХрпЛродрпБроорпИ ро╡ро┐родрпИрокрпНрокродро▒рпНроХрпБ роЪро┐ро▒роирпНрод роирпЗро░роорпН",
      thisWeek: "роЗроирпНрод ро╡ро╛ро░роорпН",
      rainyDays: "рооро┤рпИ роиро╛роЯрпНроХро│рпН",
      avgTemp: "роЪро░ро╛роЪро░ро┐ ро╡рпЖрокрпНрокроиро┐ро▓рпИ",
      soilMoisture: "роорогрпН роИро░рокрпНрокродроорпН",
    },
    mr: {
      changeLang: "рднрд╛рд╖рд╛ рдмрджрд▓рд╛",
      overview: "рдЖрдврд╛рд╡рд╛",
      analytics: "рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
      todayWeather: "рдЖрдЬрдЪреЗ рд╣рд╡рд╛рдорд╛рди",
      temp: "рддрд╛рдкрдорд╛рди",
      humidity: "рдЖрд░реНрджреНрд░рддрд╛",
      wind: "рд╡рд╛рд░рд╛",
      condition: "рд╕реНрдерд┐рддреА",
      selectCrop: "рддреБрдордЪреА рдкрд┐рдХреЗ рдирд┐рд╡рдбрд╛",
      chooseCrop: "рдкрд┐рдХ рдирд┐рд╡рдбрд╛...",
      recFor: (crop: string) => `${crop} рд╕рд╛рдареА рд╕реВрдЪрдирд╛`,
      rec1: "рдорд╛рддреАрддреАрд▓ рдУрд▓рд╛рд╡рд╛ рдЯрд┐рдХрд╡рд╛",
      rec2: "рдирд┐рдпрдорд┐рдд рддрдкрд╛рд╕рдгреА рдХрд░рд╛",
      rec3: "рдЖрд╡рд╢реНрдпрдХрддреЗрдиреБрд╕рд╛рд░ рдЦрдд рджреНрдпрд╛",
      todayRecs: "рдЖрдЬрдЪреНрдпрд╛ рд╢рд┐рдлрд╛рд░рд╕реА",
      weatherAlert: "рд╣рд╡рд╛рдорд╛рди рд╕реВрдЪрдирд╛",
      rain: "рдкреБрдвреАрд▓ рей рджрд┐рд╡рд╕рд╛рдд рдкрд╛рд╡рд╕рд╛рдЪреА рд╢рдХреНрдпрддрд╛",
      sowing: "рдкреЗрд░рдгреАрдЪрд╛ рдХрд╛рд│",
      wheatSowing: "рдЧрд╡реНрд╣рд╛рдЪреНрдпрд╛ рдкреЗрд░рдгреАрд╕рд╛рдареА рдпреЛрдЧреНрдп рд╡реЗрд│",
      thisWeek: "рдпрд╛ рдЖрдард╡рдбреНрдпрд╛рдд",
      rainyDays: "рдкрд╛рд╡рд╕рд╛рдЪреЗ рджрд┐рд╡рд╕",
      avgTemp: "рд╕рд░рд╛рд╕рд░реА рддрд╛рдкрдорд╛рди",
      soilMoisture: "рдорд╛рддреАрддреАрд▓ рдУрд▓рд╛рд╡рд╛",
    },
    gu: {
      changeLang: "ркнрк╛рк╖рк╛ ркмркжрк▓рлЛ",
      overview: "ркЭрк╛ркВркЦрлА",
      analytics: "рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг",
      todayWeather: "ркЖркЬркирлБркВ рк╣рк╡рк╛ркорк╛рки",
      temp: "ркдрк╛рккркорк╛рки",
      humidity: "ркнрлЗркЬ",
      wind: "рккрк╡рки",
      condition: "рккрк░рк┐рк╕рлНркерк┐ркдрк┐",
      selectCrop: "ркдркорк╛рк░рлА рккрк╛ркХ рккрк╕ркВркж ркХрк░рлЛ",
      chooseCrop: "рккрк╛ркХ рккрк╕ркВркж ркХрк░рлЛ...",
      recFor: (crop: string) => `${crop} ркорк╛ркЯрлЗ ркнрк▓рк╛ркоркгрлЛ`,
      rec1: "ркорк╛ркЯрлАркирлЛ ркнрлЗркЬ ркЬрк╛рк│рк╡рлЛ",
      rec2: "ркирк┐ркпркорк┐ркд ркирк┐рк░рлАркХрлНрк╖ркг ркХрк░рлЛ",
      rec3: "ркЬрк░рлВрк░ ркорлБркЬркм ркЦрк╛ркдрк░ ркЖрккрлЛ",
      todayRecs: "ркЖркЬркирлА ркнрк▓рк╛ркоркгрлЛ",
      weatherAlert: "рк╣рк╡рк╛ркорк╛рки ркЪрлЗркдрк╡ркгрлА",
      rain: "ркЖркЧрк╛ркорлА 3 ркжрк┐рк╡рк╕ркорк╛ркВ рк╡рк░рк╕рк╛ркжркирлА рк╕ркВркнрк╛рк╡ркирк╛",
      sowing: "рк╡рк╛рк╡ркгрлА рк╕ркоркп",
      wheatSowing: "ркЧрк╣рлВркВ рк╡рк╛рк╡ркгрлА ркорк╛ркЯрлЗ ркпрлЛркЧрлНркп рк╕ркоркп",
      thisWeek: "ркЖ ркЕркарк╡рк╛ркбрк┐ркпрлЗ",
      rainyDays: "рк╡рк░рк╕рк╛ркжркирк╛ ркжрк┐рк╡рк╕рлЛ",
      avgTemp: "рк╕рк░рлЗрк░рк╛рк╢ ркдрк╛рккркорк╛рки",
      soilMoisture: "ркорк╛ркЯрлАркирлЛ ркнрлЗркЬ",
    },
    kn: {
      changeLang: "р▓нр▓╛р▓╖р│Ж р▓мр▓жр▓▓р▓╛р▓пр▓┐р▓╕р▓┐",
      overview: "р▓Ер▓╡р▓▓р│Лр▓Хр▓и",
      analytics: "р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж",
      todayWeather: "р▓Зр▓Вр▓жр▓┐р▓и р▓╣р▓╡р▓╛р▓ор▓╛р▓и",
      temp: "р▓др▓╛р▓кр▓ор▓╛р▓и",
      humidity: "р▓Жр▓жр│Нр▓░р▓др│Ж",
      wind: "р▓Чр▓╛р▓│р▓┐",
      condition: "р▓╕р│Нр▓ер▓┐р▓др▓┐",
      selectCrop: "р▓ир▓┐р▓ор│Нр▓о р▓мр│Жр▓│р│Ж р▓Жр▓░р▓┐р▓╕р▓┐",
      chooseCrop: "р▓мр│Жр▓│р│Ж р▓Жр▓░р▓┐р▓╕р▓┐...",
      recFor: (crop: string) => `${crop} р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б`,
      rec1: "р▓ор▓гр│Нр▓гр▓┐р▓и р▓др│Зр▓╡р▓╛р▓Вр▓╢р▓╡р▓ир│Нр▓ир│Б р▓Хр▓╛р▓кр▓╛р▓бр▓┐",
      rec2: "р▓ир▓┐р▓пр▓ор▓┐р▓др▓╡р▓╛р▓Чр▓┐ р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐",
      rec3: "р▓Ер▓╡р▓╢р│Нр▓пр▓Хр▓др│Ж р▓Зр▓жр│Нр▓жр▓░р│Ж р▓░р▓╕р▓Чр│Кр▓мр│Нр▓мр▓░ р▓мр▓│р▓╕р▓┐",
      todayRecs: "р▓Зр▓Вр▓жр▓┐р▓и р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р│Б",
      weatherAlert: "р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Ж",
      rain: "р▓ор│Бр▓Вр▓жр▓┐р▓и 3 р▓жр▓┐р▓ир▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓ор▓│р│Ж р▓╕р▓╛р▓зр│Нр▓пр▓др│Ж",
      sowing: "р▓мр▓┐р▓др│Нр▓др▓ир│Ж р▓╕р▓ор▓п",
      wheatSowing: "р▓Чр│Лр▓зр▓┐ р▓мр▓┐р▓др│Нр▓др▓ир│Жр▓Чр│Ж р▓Йр▓др│Нр▓др▓о р▓╕р▓ор▓п",
      thisWeek: "р▓И р▓╡р▓╛р▓░",
      rainyDays: "р▓ор▓│р│Ж р▓жр▓┐р▓ир▓Чр▓│р│Б",
      avgTemp: "р▓╕р▓░р▓╛р▓╕р▓░р▓┐ р▓др▓╛р▓кр▓ор▓╛р▓и",
      soilMoisture: "р▓ор▓гр│Нр▓гр▓┐р▓и р▓др│Зр▓╡р▓╛р▓Вр▓╢",
    },
  }

  const t = labels[language]

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b bg-card">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-primary rounded-lg">
                <Sprout className="h-6 w-6 text-primary-foreground" />
              </div>
              <h1 className="text-2xl font-bold text-primary">KrishiMitraAI</h1>
            </div>

            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <MapPin className="h-4 w-4" />
                <span>{currentData.location}</span>
              </div>
              <Button variant="outline" size="sm" onClick={handleLanguageChange}>
                {t.changeLang}
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="overview" className="flex items-center gap-2">
              <Sprout className="h-4 w-4" /> {t.overview}
            </TabsTrigger>
            <TabsTrigger value="analytics" className="flex items-center gap-2">
              <BarChart3 className="h-4 w-4" /> {t.analytics}
            </TabsTrigger>
          </TabsList>

          <TabsContent value="overview">
            <div className="grid lg:grid-cols-3 gap-6">
              {/* Main Content */}
              <div className="lg:col-span-2 space-y-6">
                {/* Weather */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Sun className="h-5 w-5" /> {t.todayWeather}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-4 gap-4">
                      <div className="text-center">
                        <Thermometer className="h-8 w-8 text-orange-500 mx-auto mb-2" />
                        <p className="text-2xl font-bold">{currentData.weather.temp}</p>
                        <p className="text-sm text-muted-foreground">{t.temp}</p>
                      </div>
                      <div className="text-center">
                        <Droplets className="h-8 w-8 text-blue-500 mx-auto mb-2" />
                        <p className="text-2xl font-bold">{currentData.weather.humidity}</p>
                        <p className="text-sm text-muted-foreground">{t.humidity}</p>
                      </div>
                      <div className="text-center">
                                                <Wind className="h-8 w-8 text-gray-500 mx-auto mb-2" />
                        <p className="text-2xl font-bold">{currentData.weather.wind}</p>
                        <p className="text-sm text-muted-foreground">{t.wind}</p>
                      </div>
                      <div className="text-center">
                        <Sun className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
                        <p className="text-lg font-bold">{currentData.weather.condition}</p>
                        <p className="text-sm text-muted-foreground">{t.condition}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Crop Selection */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Sprout className="h-5 w-5" /> {t.selectCrop}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Select value={selectedCrop} onValueChange={setSelectedCrop}>
                      <SelectTrigger className="w-full">
                        <SelectValue placeholder={t.chooseCrop} />
                      </SelectTrigger>
                      <SelectContent>
                        {currentData.crops.map((crop: string, index: number) => (
                          <SelectItem key={index} value={crop}>
                            {crop}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>

                    {selectedCrop && (
                      <div className="mt-4 p-4 bg-muted rounded-lg">
                        <h4 className="font-semibold mb-2">{t.recFor(selectedCrop)}</h4>
                        <ul className="space-y-1 text-sm text-muted-foreground">
                          <li>тАв {t.rec1}</li>
                          <li>тАв {t.rec2}</li>
                          <li>тАв {t.rec3}</li>
                        </ul>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Recommendations */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <TrendingUp className="h-5 w-5" /> {t.todayRecs}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-start gap-3 p-3 rounded-lg border">
                      <AlertTriangle className="h-5 w-5 text-orange-500 mt-0.5" />
                      <div>
                        <h4 className="font-semibold">{t.weatherAlert}</h4>
                        <p className="text-sm text-muted-foreground">{t.rain}</p>
                      </div>
                    </div>
                    <div className="flex items-start gap-3 p-3 rounded-lg border">
                      <TrendingUp className="h-5 w-5 text-green-500 mt-0.5" />
                      <div>
                        <h4 className="font-semibold">{t.sowing}</h4>
                        <p className="text-sm text-muted-foreground">{t.wheatSowing}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Sidebar */}
              <div className="space-y-6">
                {/* Voice Assistant */}
                <VoiceChatbot language={language} />

                {/* Quick Stats */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Calendar className="h-5 w-5" /> {t.thisWeek}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-muted-foreground">{t.rainyDays}</span>
                      <span className="font-semibold">3</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-muted-foreground">{t.avgTemp}</span>
                      <span className="font-semibold">26┬░C</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-muted-foreground">{t.soilMoisture}</span>
                      <span className="font-semibold text-green-600">Good</span>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          {/* Analytics Tab */}
          <TabsContent value="analytics">
            <CropAnalytics language={language} selectedCrop={selectedCrop} />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}



  // "use client"

  // import { useEffect, useState } from "react"
  // import { useSearchParams } from "next/navigation"
  // import { Button } from "@/components/ui/button"
  // import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
  // import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
  // import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
  // import { Input } from "@/components/ui/input"
  // import {
  //   MapPin,
  //   Sprout,
  //   Cloud,
  //   Droplets,
  //   Wind,
  //   Sun,
  //   TrendingUp,
  //   AlertTriangle,
  //   Calendar,
  // } from "lucide-react"
  // import CropAnalytics from "@/components/crop-analytics"
  // import VoiceChatbot from "@/components/voice-chatbot"

  // // ЁЯМН Language-specific mock data
  // const locationData: Record<string, any> = {
  //   hi: {
  //     location: "рджрд┐рд▓реНрд▓реА, рднрд╛рд░рдд",
  //     weather: { temp: "28┬░C", humidity: "65%", wind: "12 km/h", condition: "рдзреВрдк" },
  //     crops: ["рдЧреЗрд╣реВрдВ", "рдзрд╛рди", "рдордХреНрдХрд╛", "рд╕рд░рд╕реЛрдВ", "рдЧрдиреНрдирд╛", "рдЬреНрд╡рд╛рд░"],
  //   },
  //   en: {
  //     location: "Delhi, India",
  //     weather: { temp: "28┬░C", humidity: "65%", wind: "12 km/h", condition: "Sunny" },
  //     crops: ["Wheat", "Rice", "Maize", "Mustard", "Sugarcane", "Sorghum"],
  //   },
  //   bn: {
  //     location: "ржврж╛ржХрж╛, ржмрж╛ржВрж▓рж╛ржжрзЗрж╢",
  //     weather: { temp: "26┬░C", humidity: "72%", wind: "10 km/h", condition: "рж░рзМржжрзНрж░рзЛржЬрзНржЬрзНржмрж▓" },
  //     crops: ["ржзрж╛ржи", "ржЧржо", "ржнрзБржЯрзНржЯрж╛", "ржкрж╛ржЯ", "ржЖржЦ", "рж╕рж░рж┐рж╖рж╛"],
  //   },
  //   te: {
  //     location: "р░╣р▒Ир░жр░░р░╛р░мр░╛р░жр▒Н, р░нр░╛р░░р░др░жр▒Зр░╢р░В",
  //     weather: { temp: "30┬░C", humidity: "60%", wind: "15 km/h", condition: "р░Ор░Вр░б" },
  //     crops: ["р░мр░┐р░пр▒Нр░пр░В", "р░Чр▒Лр░зр▒Бр░ор░▓р▒Б", "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и", "р░кр░др▒Нр░др░┐", "р░Ър▒Жр░░р░Хр▒Б", "р░Ьр▒Кр░ир▒Нр░и"],
  //   },
  //   ta: {
  //     location: "роЪрпЖройрпНройрпИ, роЗроирпНродро┐ропро╛",
  //     weather: { temp: "32┬░C", humidity: "70%", wind: "14 km/h", condition: "ро╡рпЖропро┐ро▓рпН" },
  //     crops: ["роЕро░ро┐роЪро┐", "роХрпЛродрпБроорпИ", "роЪрпЛро│роорпН", "роХро░рпБроорпНрокрпБ", "рокро░рпБродрпНродро┐", "роЪрпЛропро╛рокрпАройрпН"],
  //   },
  //   mr: {
  //     location: "рдкреБрдгреЗ, рднрд╛рд░рдд",
  //     weather: { temp: "29┬░C", humidity: "68%", wind: "11 km/h", condition: "рд╕реВрд░реНрдпрдкреНрд░рдХрд╛рд╢" },
  //     crops: ["рддрд╛рдВрджреВрд│", "рдЧрд╣реВ", "рдордХрд╛", "рдКрд╕", "рд╕реЛрдпрд╛рдмреАрди", "рдХрд╛рдкреВрд╕"],
  //   },
  //   gu: {
  //     location: "ркЕркоркжрк╛рк╡рк╛ркж, ркнрк╛рк░ркд",
  //     weather: { temp: "31┬░C", humidity: "62%", wind: "13 km/h", condition: "ркзрлБрккркЫрк╛ркВрк╡" },
  //     crops: ["ркЪрлЛркЦрк╛", "ркЧрк╣рлБркВ", "ркоркХрк╛ркИ", "ркХрккрк╛рк╕", "рк╢рлЗрк░ркбрлА", "ркЬрлНрк╡рк╛рк░"],
  //   },
  //   kn: {
  //     location: "р▓мр│Жр▓Вр▓Чр▓│р│Вр▓░р│Б, р▓нр▓╛р▓░р▓д",
  //     weather: { temp: "27┬░C", humidity: "75%", wind: "9 km/h", condition: "р▓мр▓┐р▓╕р▓┐р▓▓р│Б" },
  //     crops: ["р▓Ер▓Хр│Нр▓Хр▓┐", "р▓Чр│Лр▓зр▓┐", "р▓ор│Жр▓Хр│Нр▓Хр│Жр▓Ьр│Лр▓│", "р▓╣р▓др│Нр▓др▓┐", "р▓Хр▓мр│Нр▓мр│Б", "р▓Ьр│Лр▓│"],
  //   },
  // }

  // export default function DashboardPage() {
  //   const searchParams = useSearchParams()
  //   const language = (searchParams.get("lang") || "en") as keyof typeof locationData

  //   const [selectedCrop, setSelectedCrop] = useState<string>("")
  //   const [userLocation, setUserLocation] = useState<string>("")
  //   const [manualLocation, setManualLocation] = useState<string>("")
  //   const [locationPermissionDenied, setLocationPermissionDenied] = useState<boolean>(false)

  //   const currentData = locationData[language] || locationData["en"]

  //   // ЁЯУН Geolocation on mount
  //   useEffect(() => {
  //     if (navigator.geolocation) {
  //       navigator.geolocation.getCurrentPosition(
  //         (pos) => {
  //           const { latitude, longitude } = pos.coords
  //           setUserLocation(`Lat: ${latitude.toFixed(2)}, Lng: ${longitude.toFixed(2)}`)
  //         },
  //         () => {
  //           setLocationPermissionDenied(true)
  //         }
  //       )
  //     } else {
  //       setLocationPermissionDenied(true)
  //     }
  //   }, [])

  //   const handleManualSubmit = () => {
  //     if (manualLocation.trim()) {
  //       setUserLocation(manualLocation)
  //     }
  //   }

  //   return (
  //     <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100">
  //       <div className="container mx-auto px-4 py-8">
  //         {/* Header */}
  //         <div className="flex justify-between items-center mb-8">
  //           <h1 className="text-3xl font-bold text-primary flex items-center gap-2">
  //             <Sprout className="h-8 w-8" /> KrishiMitraAI
  //           </h1>

  //           {/* ЁЯУН Location with geolocation + manual input fallback */}
  //           <div className="flex items-center gap-2 text-sm text-muted-foreground">
  //             <MapPin className="h-4 w-4" />
  //             {userLocation ? (
  //               <span>{userLocation}</span>
  //             ) : locationPermissionDenied ? (
  //               <div className="flex gap-2">
  //                 <Input
  //                   placeholder="Enter your location..."
  //                   value={manualLocation}
  //                   onChange={(e) => setManualLocation(e.target.value)}
  //                   className="h-8"
  //                 />
  //                 <Button size="sm" onClick={handleManualSubmit}>
  //                   Save
  //                 </Button>
  //               </div>
  //             ) : (
  //               <span>Detecting location...</span>
  //             )}
  //           </div>
  //         </div>

  //         {/* Tabs */}
  //         <Tabs defaultValue="overview">
  //           <TabsList>
  //             <TabsTrigger value="overview">Overview</TabsTrigger>
  //             <TabsTrigger value="analytics">Analytics</TabsTrigger>
  //           </TabsList>

  //           {/* Overview Tab */}
  //           <TabsContent value="overview">
  //             <div className="grid md:grid-cols-3 gap-6">
  //               <div className="space-y-6 md:col-span-2">
  //                 {/* Weather Card */}
  //                 <Card>
  //                   <CardHeader>
  //                     <CardTitle className="flex items-center gap-2">
  //                       <Cloud className="h-5 w-5" /> Weather
  //                     </CardTitle>
  //                   </CardHeader>
  //                   <CardContent>
  //                     <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
  //                       <div className="text-center">
  //                         <Sun className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
  //                         <p className="text-2xl font-bold">{currentData.weather.temp}</p>
  //                         <p className="text-sm text-muted-foreground">Temp</p>
  //                       </div>
  //                       <div className="text-center">
  //                         <Droplets className="h-8 w-8 text-blue-500 mx-auto mb-2" />
  //                         <p className="text-2xl font-bold">{currentData.weather.humidity}</p>
  //                         <p className="text-sm text-muted-foreground">Humidity</p>
  //                       </div>
  //                       <div className="text-center">
  //                         <Wind className="h-8 w-8 text-gray-500 mx-auto mb-2" />
  //                         <p className="text-2xl font-bold">{currentData.weather.wind}</p>
  //                         <p className="text-sm text-muted-foreground">Wind</p>
  //                       </div>
  //                       <div className="text-center">
  //                         <Sun className="h-8 w-8 text-orange-500 mx-auto mb-2" />
  //                         <p className="text-lg font-bold">{currentData.weather.condition}</p>
  //                         <p className="text-sm text-muted-foreground">Condition</p>
  //                       </div>
  //                     </div>
  //                   </CardContent>
  //                 </Card>

  //                 {/* Crop Selection */}
  //                 <Card>
  //                   <CardHeader>
  //                     <CardTitle className="flex items-center gap-2">
  //                       <Sprout className="h-5 w-5" /> Select Crop
  //                     </CardTitle>
  //                   </CardHeader>
  //                   <CardContent>
  //                     <Select value={selectedCrop} onValueChange={setSelectedCrop}>
  //                       <SelectTrigger className="w-full">
  //                         <SelectValue placeholder="Choose a crop" />
  //                       </SelectTrigger>
  //                       <SelectContent>
  //                         {currentData.crops.map((crop: string, index: number) => (
  //                           <SelectItem key={index} value={crop}>
  //                             {crop}
  //                           </SelectItem>
  //                         ))}
  //                       </SelectContent>
  //                     </Select>

  //                     {selectedCrop && (
  //                       <div className="mt-4 p-4 bg-muted rounded-lg">
  //                         <h4 className="font-semibold mb-2">Recommendations for {selectedCrop}</h4>
  //                         <ul className="space-y-1 text-sm text-muted-foreground">
  //                           <li>тАв Maintain proper irrigation schedule.</li>
  //                           <li>тАв Use organic manure for better soil health.</li>
  //                           <li>тАв Monitor pest attacks regularly.</li>
  //                         </ul>
  //                       </div>
  //                     )}
  //                   </CardContent>
  //                 </Card>

  //                 {/* Recommendations */}
  //                 <Card>
  //                   <CardHeader>
  //                     <CardTitle className="flex items-center gap-2">
  //                       <TrendingUp className="h-5 w-5" /> Today's Recommendations
  //                     </CardTitle>
  //                   </CardHeader>
  //                   <CardContent className="space-y-4">
  //                     <div className="flex items-start gap-3 p-3 rounded-lg border">
  //                       <AlertTriangle className="h-5 w-5 text-orange-500 mt-0.5" />
  //                       <div>
  //                         <h4 className="font-semibold">Weather Alert</h4>
  //                         <p className="text-sm text-muted-foreground">Rain expected tomorrow. Avoid irrigation today.</p>
  //                       </div>
  //                     </div>
  //                     <div className="flex items-start gap-3 p-3 rounded-lg border">
  //                       <TrendingUp className="h-5 w-5 text-green-500 mt-0.5" />
  //                       <div>
  //                         <h4 className="font-semibold">Sowing Advisory</h4>
  //                         <p className="text-sm text-muted-foreground">Best time to sow wheat seeds this week.</p>
  //                       </div>
  //                     </div>
  //                   </CardContent>
  //                 </Card>
  //               </div>

  //               {/* Sidebar */}
  //               <div className="space-y-6">
  //                 <VoiceChatbot language={language as "hi" | "en" | "bn" | "te" | "ta" | "mr" | "gu" | "kn"} />

  //                 {/* Quick Stats */}
  //                 <Card>
  //                   <CardHeader>
  //                     <CardTitle className="flex items-center gap-2">
  //                       <Calendar className="h-5 w-5" /> This Week
  //                     </CardTitle>
  //                   </CardHeader>
  //                   <CardContent className="space-y-4">
  //                     <div className="flex justify-between items-center">
  //                       <span className="text-sm text-muted-foreground">Rainy Days</span>
  //                       <span className="font-semibold">3</span>
  //                     </div>
  //                     <div className="flex justify-between items-center">
  //                       <span className="text-sm text-muted-foreground">Avg Temp</span>
  //                       <span className="font-semibold">26┬░C</span>
  //                     </div>
  //                     <div className="flex justify-between items-center">
  //                       <span className="text-sm text-muted-foreground">Soil Moisture</span>
  //                       <span className="font-semibold text-green-600">Good</span>
  //                     </div>
  //                   </CardContent>
  //                 </Card>
  //               </div>
  //             </div>
  //           </TabsContent>

  //           {/* Analytics Tab */}
  //           <TabsContent value="analytics">
  //             <CropAnalytics language={language as "hi" | "en" | "bn" | "te" | "ta" | "mr" | "gu" | "kn"} selectedCrop={selectedCrop} />
  //           </TabsContent>
  //         </Tabs>
  //       </div>
  //     </div>
  //   )
  // }
