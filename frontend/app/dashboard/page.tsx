




// //   "use client"

// // import { useState, useEffect } from "react"
// // import { useRouter } from "next/navigation"
// // import { Button } from "@/components/ui/button"
// // import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
// // import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
// // import { Input } from "@/components/ui/input"
// // import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
// // import {
// //   MapPin,
// //   Thermometer,
// //   Droplets,
// //   Wind,
// //   Sun,
// //   Sprout,
// //   Calendar,
// //   BarChart3,
// // } from "lucide-react"
// // import VoiceChatbot from "@/components/voice-chatbot"
// // import CropAnalytics from "@/components/crop-analytics"

// // // üåç Language-specific mock data
// // const locationData: Record<string, any> = {
// //   hi: {
// //     location: "‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä, ‡§≠‡§æ‡§∞‡§§",
// //     weather: { temp: "28¬∞C", humidity: "65%", wind: "12 km/h", condition: "‡§ß‡•Ç‡§™" },
// //     crops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§Æ‡§ï‡•ç‡§ï‡§æ", "‡§∏‡§∞‡§∏‡•ã‡§Ç", "‡§ó‡§®‡•ç‡§®‡§æ", "‡§ú‡•ç‡§µ‡§æ‡§∞"],
// //   },
// //   en: {
// //     location: "Delhi, India",
// //     weather: { temp: "28¬∞C", humidity: "65%", wind: "12 km/h", condition: "Sunny" },
// //     crops: ["Wheat", "Rice", "Maize", "Mustard", "Sugarcane", "Sorghum"],
// //   },
// //   bn: {
// //     location: "‡¶¢‡¶æ‡¶ï‡¶æ, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂",
// //     weather: { temp: "26¬∞C", humidity: "72%", wind: "10 km/h", condition: "‡¶∞‡ßå‡¶¶‡ßç‡¶∞‡ßã‡¶ú‡ßç‡¶ú‡ßç‡¶¨‡¶≤" },
// //     crops: ["‡¶ß‡¶æ‡¶®", "‡¶ó‡¶Æ", "‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ", "‡¶™‡¶æ‡¶ü", "‡¶Ü‡¶ñ", "‡¶∏‡¶∞‡¶ø‡¶∑‡¶æ"],
// //   },
// //   te: {
// //     location: "‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç, ‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç",
// //     weather: { temp: "30¬∞C", humidity: "60%", wind: "15 km/h", condition: "‡∞é‡∞Ç‡∞°" },
// //     crops: ["‡∞¨‡∞ø‡∞Ø‡±ç‡∞Ø‡∞Ç", "‡∞ó‡±ã‡∞ß‡±Å‡∞Æ‡∞≤‡±Å", "‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞ú‡±ä‡∞®‡±ç‡∞®", "‡∞™‡∞§‡±ç‡∞§‡∞ø", "‡∞ö‡±Ü‡∞∞‡∞ï‡±Å", "‡∞ú‡±ä‡∞®‡±ç‡∞®"],
// //   },
// //   ta: {
// //     location: "‡Æö‡ØÜ‡Æ©‡Øç‡Æ©‡Øà, ‡Æá‡Æ®‡Øç‡Æ§‡Æø‡ÆØ‡Ææ",
// //     weather: { temp: "32¬∞C", humidity: "70%", wind: "14 km/h", condition: "‡Æµ‡ØÜ‡ÆØ‡Æø‡Æ≤‡Øç" },
// //     crops: ["‡ÆÖ‡Æ∞‡Æø‡Æö‡Æø", "‡Æï‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øà", "‡Æö‡Øã‡Æ≥‡ÆÆ‡Øç", "‡Æï‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ", "‡Æ™‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æø", "‡Æö‡Øã‡ÆØ‡Ææ‡Æ™‡ØÄ‡Æ©‡Øç"],
// //   },
// //   mr: {
// //     location: "‡§™‡•Å‡§£‡•á, ‡§≠‡§æ‡§∞‡§§",
// //     weather: { temp: "29¬∞C", humidity: "68%", wind: "11 km/h", condition: "‡§∏‡•Ç‡§∞‡•ç‡§Ø‡§™‡•ç‡§∞‡§ï‡§æ‡§∂" },
// //     crops: ["‡§§‡§æ‡§Ç‡§¶‡•Ç‡§≥", "‡§ó‡§π‡•Ç", "‡§Æ‡§ï‡§æ", "‡§ä‡§∏", "‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®", "‡§ï‡§æ‡§™‡•Ç‡§∏"],
// //   },
// //   gu: {
// //     location: "‡™Ö‡™Æ‡™¶‡™æ‡™µ‡™æ‡™¶, ‡™≠‡™æ‡™∞‡™§",
// //     weather: { temp: "31¬∞C", humidity: "62%", wind: "13 km/h", condition: "‡™ß‡´Å‡™™‡™õ‡™æ‡™Ç‡™µ" },
// //     crops: ["‡™ö‡´ã‡™ñ‡™æ", "‡™ó‡™π‡´Å‡™Ç", "‡™Æ‡™ï‡™æ‡™à", "‡™ï‡™™‡™æ‡™∏", "‡™∂‡´á‡™∞‡™°‡´Ä", "‡™ú‡´ç‡™µ‡™æ‡™∞"],
// //   },
// //   kn: {
// //     location: "‡≤¨‡≥Ü‡≤Ç‡≤ó‡≤≥‡≥Ç‡≤∞‡≥Å, ‡≤≠‡≤æ‡≤∞‡≤§",
// //     weather: { temp: "27¬∞C", humidity: "75%", wind: "9 km/h", condition: "‡≤¨‡≤ø‡≤∏‡≤ø‡≤≤‡≥Å" },
// //     crops: ["‡≤Ö‡≤ï‡≥ç‡≤ï‡≤ø", "‡≤ó‡≥ã‡≤ß‡≤ø", "‡≤Æ‡≥Ü‡≤ï‡≥ç‡≤ï‡≥Ü‡≤ú‡≥ã‡≤≥", "‡≤π‡≤§‡≥ç‡≤§‡≤ø", "‡≤ï‡≤¨‡≥ç‡≤¨‡≥Å", "‡≤ú‡≥ã‡≤≥"],
// //   },
// // }

// // // üåê UI text translations
// // const labels: any = {
// //   hi: {
// //     changeLang: "‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç",
// //     overview: "‡§Ö‡§µ‡§≤‡•ã‡§ï‡§®",
// //     analytics: "‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏",
// //     todayWeather: "‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ",
// //     temp: "‡§§‡§æ‡§™‡§Æ‡§æ‡§®",
// //     humidity: "‡§®‡§Æ‡•Ä",
// //     wind: "‡§π‡§µ‡§æ",
// //     condition: "‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
// //     selectCrop: "‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç",
// //     chooseCrop: "‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç...",
// //     recFor: (crop: string) => `${crop} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ`,
// //     rec1: "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç",
// //     rec2: "‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç",
// //     rec3: "‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç",
// //     todayRecs: "‡§Ü‡§ú ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç",
// //     weatherAlert: "‡§Æ‡•å‡§∏‡§Æ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä",
// //     rain: "‡§Ö‡§ó‡§≤‡•á 3 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ",
// //     sowing: "‡§¨‡•Å‡§Ü‡§à ‡§ï‡§æ ‡§∏‡§Æ‡§Ø",
// //     wheatSowing: "‡§ó‡•á‡§π‡•Ç‡§Ç ‡§¨‡•Å‡§Ü‡§à ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∏‡§Æ‡§Ø",
// //     thisWeek: "‡§á‡§∏ ‡§∏‡§™‡•ç‡§§‡§æ‡§π",
// //     rainyDays: "‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•á ‡§¶‡§ø‡§®",
// //     avgTemp: "‡§î‡§∏‡§§ ‡§§‡§æ‡§™‡§Æ‡§æ‡§®",
// //     soilMoisture: "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä",
// //     enterArea: "‡§≠‡•Ç‡§Æ‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
// //     unit: "‡§á‡§ï‡§æ‡§à",
// //     acre: "‡§è‡§ï‡§°‡§º",
// //     hectare: "‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞",
// //     sqm: "‡§µ‡§∞‡•ç‡§ó ‡§Æ‡•Ä‡§ü‡§∞",
// //     sqft: "‡§µ‡§∞‡•ç‡§ó ‡§´‡•Ä‡§ü",
// //     seour: "‡§Æ‡•å‡§∏‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç",
// //     rabi: "‡§∞‡§¨‡•Ä",
// //     kharif: "‡§ñ‡§∞‡•Ä‡§´",
// //     all: "‡§∏‡§≠‡•Ä",
// //     recommendations: "‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç",
// //     yield: "‡§â‡§™‡§ú",
// //     production: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®",
// //     fertilizer: "‡§â‡§∞‡•ç‡§µ‡§∞‡§ï",
// //   },
// //   en: {
// //     changeLang: "Change Language",
// //     overview: "Overview",
// //     analytics: "Analytics",
// //     todayWeather: "Today's Weather",
// //     temp: "Temperature",
// //     humidity: "Humidity",
// //     wind: "Wind",
// //     condition: "Condition",
// //     selectCrop: "Select Your Crop",
// //     chooseCrop: "Choose a crop...",
// //     recFor: (crop: string) => `Recommendations for ${crop}`,
// //     rec1: "Maintain soil moisture",
// //     rec2: "Regular monitoring required",
// //     rec3: "Apply fertilizer as needed",
// //     todayRecs: "Today's Recommendations",
// //     weatherAlert: "Weather Alert",
// //     rain: "Rain expected in next 3 days",
// //     sowing: "Sowing Time",
// //     wheatSowing: "Optimal time for wheat sowing",
// //     thisWeek: "This Week",
// //     rainyDays: "Rainy Days",
// //     avgTemp: "Avg Temperature",
// //     soilMoisture: "Soil Moisture",
// //     enterArea: "Enter land area",
// //     unit: "Unit",
// //     acre: "Acre",
// //     hectare: "Hectare",
// //     sqm: "Sq. Meter",
// //     sqft: "Sq. Feet",
// //     seour: "Select season",
// //     rabi: "Rabi",
// //     kharif: "Kharif",
// //     all: "All",
// //     recommendations: "Recommendations",
// //     yield: "Yield",
// //     production: "Production",
// //     fertilizer: "Fertilizer",
// //   },
// //   bn: {
// //     changeLang: "‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®",
// //     overview: "‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£",
// //     analytics: "‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£",
// //     todayWeather: "‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ",
// //     temp: "‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ",
// //     humidity: "‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ",
// //     wind: "‡¶¨‡¶æ‡¶§‡¶æ‡¶∏",
// //     condition: "‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ",
// //     selectCrop: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶∏‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
// //     chooseCrop: "‡¶´‡¶∏‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®...",
// //     recFor: (crop: string) => `${crop} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂`,
// //     rec1: "‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ ‡¶¨‡¶ú‡¶æ‡¶Ø‡¶º ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®",
// //     rec2: "‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶™‡¶∞‡¶ø‡¶¶‡¶∞‡ßç‡¶∂‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
// //     rec3: "‡¶∏‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®",
// //     todayRecs: "‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂",
// //     weatherAlert: "‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ",
// //     rain: "‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡ß© ‡¶¶‡¶ø‡¶®‡ßá ‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ",
// //     sowing: "‡¶¨‡¶™‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º",
// //     wheatSowing: "‡¶ó‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶¨‡¶™‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º",
// //     thisWeek: "‡¶è‡¶á ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá",
// //     rainyDays: "‡¶¨‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∞ ‡¶¶‡¶ø‡¶®",
// //     avgTemp: "‡¶ó‡¶°‡¶º ‡¶§‡¶æ‡¶™‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ",
// //     soilMoisture: "‡¶Æ‡¶æ‡¶ü‡¶ø‡¶∞ ‡¶Ü‡¶∞‡ßç‡¶¶‡ßç‡¶∞‡¶§‡¶æ",
// //     enterArea: "‡¶≠‡ßÇ‡¶Æ‡¶ø‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
// //     unit: "‡¶è‡¶ï‡¶ï",
// //     acre: "‡¶è‡¶ï‡¶∞",
// //     hectare: "‡¶π‡ßá‡¶ï‡ßç‡¶ü‡¶∞",
// //     sqm: "‡¶¨‡¶∞‡ßç‡¶ó ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞",
// //     sqft: "‡¶¨‡¶∞‡ßç‡¶ó ‡¶´‡ßÅ‡¶ü",
// //     seour: "‡¶ã‡¶§‡ßÅ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
// //     rabi: "‡¶∞‡¶¨‡¶ø",
// //     kharif: "‡¶ñ‡¶∞‡¶ø‡¶´",
// //     all: "‡¶∏‡¶¨",
// //     recommendations: "‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂",
// //     yield: "‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶®",
// //     production: "‡¶´‡¶∏‡¶≤",
// //     fertilizer: "‡¶∏‡¶æ‡¶∞",
// //   },
// //   te: {
// //     changeLang: "‡∞≠‡∞æ‡∞∑ ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞Ç‡∞°‡∞ø",
// //     overview: "‡∞Ö‡∞µ‡∞≤‡±ã‡∞ï‡∞®‡∞Ç",
// //     analytics: "‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£",
// //     todayWeather: "‡∞à‡∞∞‡±ã‡∞ú‡±Å ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç",
// //     temp: "‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§",
// //     humidity: "‡∞Ü‡∞∞‡±ç‡∞¶‡±ç‡∞∞‡∞§",
// //     wind: "‡∞ó‡∞æ‡∞≤‡∞ø",
// //     condition: "‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø",
// //     selectCrop: "‡∞Æ‡±Ä ‡∞™‡∞Ç‡∞ü‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
// //     chooseCrop: "‡∞™‡∞Ç‡∞ü‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø...",
// //     recFor: (crop: string) => `${crop} ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å`,
// //     rec1: "‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞§‡±á‡∞Æ‡∞®‡±Å ‡∞â‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
// //     rec2: "‡∞ï‡±ç‡∞∞‡∞Æ‡∞Ç ‡∞§‡∞™‡±ç‡∞™‡∞ï‡±Å‡∞Ç‡∞°‡∞æ ‡∞™‡∞∞‡±ç‡∞Ø‡∞µ‡±á‡∞ï‡±ç‡∞∑‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
// //     rec3: "‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Æ‡±à‡∞§‡±á ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å ‡∞µ‡∞æ‡∞°‡∞Ç‡∞°‡∞ø",
// //     todayRecs: "‡∞à‡∞∞‡±ã‡∞ú‡±Å ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡∞∏‡±Å‡∞≤‡±Å",
// //     weatherAlert: "‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞π‡±Ü‡∞ö‡±ç‡∞ö‡∞∞‡∞ø‡∞ï",
// //     rain: "‡∞§‡∞¶‡±Å‡∞™‡∞∞‡∞ø 3 ‡∞∞‡±ã‡∞ú‡±Å‡∞≤‡±ç‡∞≤‡±ã ‡∞µ‡∞∞‡±ç‡∞∑‡∞Ç ‡∞Ö‡∞µ‡∞ï‡∞æ‡∞∂‡∞Ç ‡∞â‡∞Ç‡∞¶‡∞ø",
// //     sowing: "‡∞µ‡∞ø‡∞§‡±ç‡∞§‡∞® ‡∞∏‡∞Æ‡∞Ø‡∞Ç",
// //     wheatSowing: "‡∞ó‡±ã‡∞ß‡±Å‡∞Æ‡∞≤ ‡∞µ‡∞ø‡∞§‡±ç‡∞§‡∞®‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Ö‡∞®‡±Å‡∞ï‡±Ç‡∞≤ ‡∞∏‡∞Æ‡∞Ø‡∞Ç",
// //     thisWeek: "‡∞à ‡∞µ‡∞æ‡∞∞‡∞Ç",
// //     rainyDays: "‡∞µ‡∞∞‡±ç‡∞∑‡∞™‡±Å ‡∞∞‡±ã‡∞ú‡±Å‡∞≤‡±Å",
// //     avgTemp: "‡∞∏‡∞ó‡∞ü‡±Å ‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§",
// //     soilMoisture: "‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞§‡±á‡∞Æ",
// //     enterArea: "‡∞≠‡±Ç‡∞Æ‡∞ø ‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
// //     unit: "‡∞Ø‡±Ç‡∞®‡∞ø‡∞ü‡±ç",
// //     acre: "‡∞é‡∞ï‡∞∞‡∞Ç",
// //     hectare: "‡∞π‡±Ü‡∞ï‡±ç‡∞ü‡∞æ‡∞∞‡±ç",
// //     sqm: "‡∞ö.‡∞Æ‡±Ä.",
// //     sqft: "‡∞ö.‡∞Ö‡∞°‡∞ø",
// //     seour: "‡∞∏‡±Ä‡∞ú‡∞®‡±ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø",
// //     rabi: "‡∞∞‡∞¨‡±Ä",
// //     kharif: "‡∞ñ‡∞∞‡±Ä‡∞´‡±ç",
// //     all: "‡∞Ö‡∞®‡±ç‡∞®‡∞ø",
// //     recommendations: "‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡∞∏‡±Å‡∞≤‡±Å",
// //     yield: "‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡∞ø",
// //     production: "‡∞™‡∞Ç‡∞ü",
// //     fertilizer: "‡∞é‡∞∞‡±Å‡∞µ‡±Å",
// //   },
// //   ta: {
// //     changeLang: "‡ÆÆ‡Øä‡Æ¥‡Æø ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ",
// //     overview: "‡ÆÆ‡Øá‡Æ≤‡Øã‡Æü‡Øç‡Æü‡ÆÆ‡Øç",
// //     analytics: "‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ",
// //     todayWeather: "‡Æá‡Æ©‡Øç‡Æ±‡Øà‡ÆØ ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà",
// //     temp: "‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà",
// //     humidity: "‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Øç",
// //     wind: "‡Æï‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ",
// //     condition: "‡Æ®‡Æø‡Æ≤‡Øà",
// //     selectCrop: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï",
// //     chooseCrop: "‡Æ™‡ÆØ‡Æø‡Æ∞‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç...",
// //     recFor: (crop: string) => `${crop} ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç`,
// //     rec1: "‡ÆÆ‡Æ£‡Øç ‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡Æ§‡Øç‡Æ§‡Øà ‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
// //     rec2: "‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Æ£‡Øç‡Æï‡Ææ‡Æ£‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
// //     rec3: "‡Æ§‡Øá‡Æµ‡Øà‡ÆØ‡ØÜ‡Æ©‡Æø‡Æ≤‡Øç ‡Æâ‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç",
// //     todayRecs: "‡Æá‡Æ©‡Øç‡Æ±‡Øà‡ÆØ ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç",
// //     weatherAlert: "‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà",
// //     rain: "‡ÆÖ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§ 3 ‡Æ®‡Ææ‡Æü‡Øç‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æ¥‡Øà ‡Æµ‡Ææ‡ÆØ‡Øç‡Æ™‡Øç‡Æ™‡ØÅ",
// //     sowing: "‡Æµ‡Æø‡Æ§‡Øà‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç",
// //     wheatSowing: "‡Æï‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øà ‡Æµ‡Æø‡Æ§‡Øà‡Æ™‡Øç‡Æ™‡Æ§‡Æ±‡Øç‡Æï‡ØÅ ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç",
// //     thisWeek: "‡Æá‡Æ®‡Øç‡Æ§ ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç",
// //     rainyDays: "‡ÆÆ‡Æ¥‡Øà ‡Æ®‡Ææ‡Æü‡Øç‡Æï‡Æ≥‡Øç",
// //     avgTemp: "‡Æö‡Æ∞‡Ææ‡Æö‡Æ∞‡Æø ‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà",
// //     soilMoisture: "‡ÆÆ‡Æ£‡Øç ‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Øç",
// //     enterArea: "‡Æ®‡Æø‡Æ≤‡Æ™‡Øç‡Æ™‡Æ∞‡Æ™‡Øç‡Æ™‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç",
// //     unit: "‡ÆÖ‡Æ≤‡Æï‡ØÅ",
// //     acre: "‡Æè‡Æï‡Øç‡Æï‡Æ∞‡Øç",
// //     hectare: "‡Æπ‡ØÜ‡Æï‡Øç‡Æü‡Øá‡Æ∞‡Øç",
// //     sqm: "‡Æö.‡ÆÆ‡ØÄ.",
// //     sqft: "‡Æö.‡ÆÖ‡Æü‡Æø",
// //     seour: "‡Æ™‡Æ∞‡ØÅ‡Æµ‡ÆÆ‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç",
// //     rabi: "‡Æ∞‡Æ™‡Æø",
// //     kharif: "‡Æï‡Æ∞‡ØÄ‡Æ™‡Øç",
// //     all: "‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ‡ÆÆ‡Øç",
// //     recommendations: "‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç",
// //     yield: "‡Æâ‡Æ±‡Øç‡Æ™‡Æ§‡Øç‡Æ§‡Æø",
// //     production: "‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç",
// //     fertilizer: "‡Æâ‡Æ∞‡ÆÆ‡Øç",
// //   },
// //   mr: {
// //     changeLang: "‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡§æ",
// //     overview: "‡§Ü‡§¢‡§æ‡§µ‡§æ",
// //     analytics: "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
// //     todayWeather: "‡§Ü‡§ú‡§ö‡•á ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®",
// //     temp: "‡§§‡§æ‡§™‡§Æ‡§æ‡§®",
// //     humidity: "‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ",
// //     wind: "‡§µ‡§æ‡§∞‡§æ",
// //     condition: "‡§∏‡•ç‡§•‡§ø‡§§‡•Ä",
// //     selectCrop: "‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§™‡§ø‡§ï‡•á ‡§®‡§ø‡§µ‡§°‡§æ",
// //     chooseCrop: "‡§™‡§ø‡§ï ‡§®‡§ø‡§µ‡§°‡§æ...",
// //     recFor: (crop: string) => `${crop} ‡§∏‡§æ‡§†‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ`,
// //     rec1: "‡§Æ‡§æ‡§§‡•Ä‡§§‡•Ä‡§≤ ‡§ì‡§≤‡§æ‡§µ‡§æ ‡§ü‡§ø‡§ï‡§µ‡§æ",
// //     rec2: "‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§§‡§™‡§æ‡§∏‡§£‡•Ä ‡§ï‡§∞‡§æ",
// //     rec3: "‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡•á‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ñ‡§§ ‡§¶‡•ç‡§Ø‡§æ",
// //     todayRecs: "‡§Ü‡§ú‡§ö‡•ç‡§Ø‡§æ ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏‡•Ä",
// //     weatherAlert: "‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§∏‡•Ç‡§ö‡§®‡§æ",
// //     rain: "‡§™‡•Å‡§¢‡•Ä‡§≤ ‡•© ‡§¶‡§ø‡§µ‡§∏‡§æ‡§§ ‡§™‡§æ‡§µ‡§∏‡§æ‡§ö‡•Ä ‡§∂‡§ï‡•ç‡§Ø‡§§‡§æ",
// //     sowing: "‡§™‡•á‡§∞‡§£‡•Ä‡§ö‡§æ ‡§ï‡§æ‡§≥",
// //     wheatSowing: "‡§ó‡§µ‡•ç‡§π‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡•á‡§∞‡§£‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§µ‡•á‡§≥",
// //     thisWeek: "‡§Ø‡§æ ‡§Ü‡§†‡§µ‡§°‡•ç‡§Ø‡§æ‡§§",
// //     rainyDays: "‡§™‡§æ‡§µ‡§∏‡§æ‡§ö‡•á ‡§¶‡§ø‡§µ‡§∏",
// //     avgTemp: "‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä ‡§§‡§æ‡§™‡§Æ‡§æ‡§®",
// //     soilMoisture: "‡§Æ‡§æ‡§§‡•Ä‡§§‡•Ä‡§≤ ‡§ì‡§≤‡§æ‡§µ‡§æ",
// //     enterArea: "‡§ú‡§Æ‡§ø‡§®‡•Ä‡§ö‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ",
// //     unit: "‡§è‡§ï‡§ï",
// //     acre: "‡§è‡§ï‡§∞",
// //     hectare: "‡§π‡•á‡§ï‡•ç‡§ü‡§∞",
// //     sqm: "‡§ö‡•å.‡§Æ‡•Ä.",
// //     sqft: "‡§ö‡•å.‡§´‡•Å‡§ü",
// //     seour: "‡§π‡§Ç‡§ó‡§æ‡§Æ ‡§®‡§ø‡§µ‡§°‡§æ",
// //     rabi: "‡§∞‡§¨‡•Ä",
// //     kharif: "‡§ñ‡§∞‡•Ä‡§´",
// //     all: "‡§∏‡§∞‡•ç‡§µ",
// //     recommendations: "‡§∂‡§ø‡§´‡§æ‡§∞‡§∏‡•Ä",
// //     yield: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®",
// //     production: "‡§™‡§ø‡§ï",
// //     fertilizer: "‡§ñ‡§§",
// //   },
// //   gu: {
// //     changeLang: "‡™≠‡™æ‡™∑‡™æ ‡™¨‡™¶‡™≤‡´ã",
// //     overview: "‡™ù‡™æ‡™Ç‡™ñ‡´Ä",
// //     analytics: "‡™µ‡™ø‡™∂‡´ç‡™≤‡´á‡™∑‡™£",
// //     todayWeather: "‡™Ü‡™ú‡™®‡´Å‡™Ç ‡™π‡™µ‡™æ‡™Æ‡™æ‡™®",
// //     temp: "‡™§‡™æ‡™™‡™Æ‡™æ‡™®",
// //     humidity: "‡™≠‡´á‡™ú",
// //     wind: "‡™™‡™µ‡™®",
// //     condition: "‡™™‡™∞‡™ø‡™∏‡´ç‡™•‡™ø‡™§‡™ø",
// //     selectCrop: "‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™™‡™æ‡™ï ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã",
// //     chooseCrop: "‡™™‡™æ‡™ï ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã...",
// //     recFor: (crop: string) => `${crop} ‡™Æ‡™æ‡™ü‡´á ‡™≠‡™≤‡™æ‡™Æ‡™£‡´ã`,
// //     rec1: "‡™Æ‡™æ‡™ü‡´Ä‡™®‡´ã ‡™≠‡´á‡™ú ‡™ú‡™æ‡™≥‡™µ‡´ã",
// //     rec2: "‡™®‡™ø‡™Ø‡™Æ‡™ø‡™§ ‡™®‡™ø‡™∞‡´Ä‡™ï‡´ç‡™∑‡™£ ‡™ï‡™∞‡´ã",
// //     rec3: "‡™ú‡™∞‡´Ç‡™∞ ‡™Æ‡´Å‡™ú‡™¨ ‡™ñ‡™æ‡™§‡™∞ ‡™Ü‡™™‡´ã",
// //     todayRecs: "‡™Ü‡™ú‡™®‡´Ä ‡™≠‡™≤‡™æ‡™Æ‡™£‡´ã",
// //     weatherAlert: "‡™π‡™µ‡™æ‡™Æ‡™æ‡™® ‡™ö‡´á‡™§‡™µ‡™£‡´Ä",
// //     rain: "‡™Ü‡™ó‡™æ‡™Æ‡´Ä 3 ‡™¶‡™ø‡™µ‡™∏‡™Æ‡™æ‡™Ç ‡™µ‡™∞‡™∏‡™æ‡™¶‡™®‡´Ä ‡™∏‡™Ç‡™≠‡™æ‡™µ‡™®‡™æ",
// //     sowing: "‡™µ‡™æ‡™µ‡™£‡´Ä ‡™∏‡™Æ‡™Ø",
// //     wheatSowing: "‡™ó‡™π‡´Ç‡™Ç ‡™µ‡™æ‡™µ‡™£‡´Ä ‡™Æ‡™æ‡™ü‡´á ‡™Ø‡´ã‡™ó‡´ç‡™Ø ‡™∏‡™Æ‡™Ø",
// //     thisWeek: "‡™Ü ‡™Ö‡™†‡™µ‡™æ‡™°‡™ø‡™Ø‡´á",
// //     rainyDays: "‡™µ‡™∞‡™∏‡™æ‡™¶‡™®‡™æ ‡™¶‡™ø‡™µ‡™∏‡´ã",
// //     avgTemp: "‡™∏‡™∞‡´á‡™∞‡™æ‡™∂ ‡™§‡™æ‡™™‡™Æ‡™æ‡™®",
// //     soilMoisture: "‡™Æ‡™æ‡™ü‡´Ä‡™®‡´ã ‡™≠‡´á‡™ú",
// //     enterArea: "‡™ú‡™Æ‡´Ä‡™®‡™®‡´Å‡™Ç ‡™ï‡´ç‡™∑‡´á‡™§‡´ç‡™∞ ‡™¶‡™æ‡™ñ‡™≤ ‡™ï‡™∞‡´ã",
// //     unit: "‡™è‡™ï‡™Æ",
// //     acre: "‡™è‡™ï‡™∞",
// //     hectare: "‡™π‡´á‡™ï‡´ç‡™ü‡™∞",
// //     sqm: "‡™ö‡´ã.‡™Æ‡´Ä.",
// //     sqft: "‡™ö‡´ã.‡™´‡´Å‡™ü",
// //     seour: "‡™Æ‡´ã‡™∏‡™Æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´ã",
// //     rabi: "‡™∞‡™¨‡´Ä",
// //     kharif: "‡™ñ‡™∞‡´Ä‡™´",
// //     all: "‡™¨‡™ß‡´Å‡™Ç",
// //     recommendations: "‡™≠‡™≤‡™æ‡™Æ‡™£‡´ã",
// //     yield: "‡™â‡™§‡´ç‡™™‡™æ‡™¶‡™®",
// //     production: "‡™™‡™æ‡™ï",
// //     fertilizer: "‡™ñ‡™æ‡™§‡™∞",
// //   },
// //   kn: {
// //     changeLang: "‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤¨‡≤¶‡≤≤‡≤æ‡≤Ø‡≤ø‡≤∏‡≤ø",
// //     overview: "‡≤Ö‡≤µ‡≤≤‡≥ã‡≤ï‡≤®",
// //     analytics: "‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤£‡≥Ü",
// //     todayWeather: "‡≤á‡≤Ç‡≤¶‡≤ø‡≤® ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤®",
// //     temp: "‡≤§‡≤æ‡≤™‡≤Æ‡≤æ‡≤®",
// //     humidity: "‡≤Ü‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü",
// //     wind: "‡≤ó‡≤æ‡≤≥‡≤ø",
// //     condition: "‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø",
// //     selectCrop: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤Ü‡≤∞‡≤ø‡≤∏‡≤ø",
// //     chooseCrop: "‡≤¨‡≥Ü‡≤≥‡≥Ü ‡≤Ü‡≤∞‡≤ø‡≤∏‡≤ø...",
// //     recFor: (crop: string) => `${crop} ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å‡≤ó‡≤≥‡≥Å`,
// //     rec1: "‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤® ‡≤§‡≥á‡≤µ‡≤æ‡≤Ç‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤æ‡≤™‡≤æ‡≤°‡≤ø",
// //     rec2: "‡≤®‡≤ø‡≤Ø‡≤Æ‡≤ø‡≤§‡≤µ‡≤æ‡≤ó‡≤ø ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤ø",
// //     rec3: "‡≤Ö‡≤µ‡≤∂‡≥ç‡≤Ø‡≤ï‡≤§‡≥Ü ‡≤á‡≤¶‡≥ç‡≤¶‡≤∞‡≥Ü ‡≤∞‡≤∏‡≤ó‡≥ä‡≤¨‡≥ç‡≤¨‡≤∞ ‡≤¨‡≤≥‡≤∏‡≤ø",
// //     todayRecs: "‡≤á‡≤Ç‡≤¶‡≤ø‡≤® ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å‡≤ó‡≤≥‡≥Å",
// //     weatherAlert: "‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤® ‡≤é‡≤ö‡≥ç‡≤ö‡≤∞‡≤ø‡≤ï‡≥Ü",
// //     rain: "‡≤Æ‡≥Å‡≤Ç‡≤¶‡≤ø‡≤® 3 ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤Æ‡≤≥‡≥Ü ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤§‡≥Ü",
// //     sowing: "‡≤¨‡≤ø‡≤§‡≥ç‡≤§‡≤®‡≥Ü ‡≤∏‡≤Æ‡≤Ø",
// //     wheatSowing: "‡≤ó‡≥ã‡≤ß‡≤ø ‡≤¨‡≤ø‡≤§‡≥ç‡≤§‡≤®‡≥Ü‡≤ó‡≥Ü ‡≤â‡≤§‡≥ç‡≤§‡≤Æ ‡≤∏‡≤Æ‡≤Ø",
// //     thisWeek: "‡≤à ‡≤µ‡≤æ‡≤∞",
// //     rainyDays: "‡≤Æ‡≤≥‡≥Ü ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥‡≥Å",
// //     avgTemp: "‡≤∏‡≤∞‡≤æ‡≤∏‡≤∞‡≤ø ‡≤§‡≤æ‡≤™‡≤Æ‡≤æ‡≤®",
// //     soilMoisture: "‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤® ‡≤§‡≥á‡≤µ‡≤æ‡≤Ç‡≤∂",
// //     enterArea: "‡≤≠‡≥Ç ‡≤™‡≥ç‡≤∞‡≤¶‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø",
// //     unit: "‡≤ò‡≤ü‡≤ï",
// //     acre: "‡≤é‡≤ï‡≤∞‡≥Ü",
// //     hectare: "‡≤π‡≥Ü‡≤ï‡≥ç‡≤ü‡≥á‡≤∞‡≥ç",
// //     sqm: "‡≤ö.‡≤Æ‡≥Ä.",
// //     sqft: "‡≤ö.‡≤Ö‡≤°‡≤ø",
// //     seour: "‡≤ã‡≤§‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø",
// //     rabi: "‡≤∞‡≤¨‡≤ø",
// //     kharif: "‡≤ñ‡≤∞‡≥Ä‡≤´‡≥ç",
// //     all: "‡≤é‡≤≤‡≥ç‡≤≤‡≤æ",
// //     recommendations: "‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å‡≤ó‡≤≥‡≥Å",
// //     yield: "‡≤â‡≤§‡≥ç‡≤™‡≤æ‡≤¶‡≤®‡≥Ü",
// //     production: "‡≤¨‡≥Ü‡≤≥‡≥Ü",
// //     fertilizer: "‡≤∞‡≤∏‡≤ó‡≥ä‡≤¨‡≥ç‡≤¨‡≤∞",
// //   },
// // }

// // export default function Dashboard() {
// //   const [selectedCrop, setSelectedCrop] = useState<string>("")
// //   const [location, setLocation] = useState<string>("")
// //   const [language, setLanguage] = useState<"hi" | "en" | "bn" | "te" | "ta" | "mr" | "gu" | "kn">("en")
// //   const [activeTab, setActiveTab] = useState("overview")

// //   const [landArea, setLandArea] = useState<string>("")
// //   const [landUnit, setLandUnit] = useState<string>("acre")
// //   const [season, setSeason] = useState<string>("all")

// //   // Results from backend
// //   const [yieldResult, setYieldResult] = useState<any | null>(null)
// //   const [fertilizerResult, setFertilizerResult] = useState<string>("")

// //   const router = useRouter()

// //   useEffect(() => {
// //     const urlParams = new URLSearchParams(window.location.search)
// //     const lang = (urlParams.get("lang") as typeof language) || "en"
// //     setLanguage(lang)

// //     if (navigator.geolocation) {
// //       navigator.geolocation.getCurrentPosition(
// //         (position) => {
// //           setLocation(`${position.coords.latitude.toFixed(2)}, ${position.coords.longitude.toFixed(2)}`)
// //         },
// //         () => {
// //           setLocation("Delhi, India")
// //         },
// //       )
// //     }
// //   }, [])

// //   const currentData = locationData[language]
// //   const t = labels[language]

// //   // ----------------- API CALLS -----------------
// //   async function fetchPredictions() {
// //     if (!selectedCrop || !landArea) {
// //       alert("Please select crop and enter land area")
// //       return
// //     }

// //     try {
// //       // Yield Prediction
// //       const resYield = await fetch("http://localhost:8000/predict-yield", {
// //         method: "POST",
// //         headers: { "Content-Type": "application/json" },
// //         body: JSON.stringify({
// //           state: "Delhi", // TODO: reverse geocode from `location`
// //           district: "New Delhi",
// //           year: 2025,
// //           season,
// //           crop: selectedCrop,
// //           area: parseFloat(landArea),
// //         }),
// //       })
// //       const dataYield = await resYield.json()
// //       setYieldResult(dataYield)

// //       // Fertilizer Recommendation
// //       const resFert = await fetch("http://localhost:8000/predict-fertilizer", {
// //         method: "POST",
// //         headers: { "Content-Type": "application/json" },
// //         body: JSON.stringify({
// //           state: "Delhi",
// //           temperature: 30,
// //           humidity: 60,
// //           moisture: 40,
// //           crop_type: selectedCrop,
// //         }),
// //       })
// //       const dataFert = await resFert.json()
// //       setFertilizerResult(dataFert.fertilizer)
// //     } catch (err) {
// //       console.error("Backend error:", err)
// //     }
// //   }

// //   return (
// //     <div className="min-h-screen bg-background">
// //       {/* Header */}
// //       <div className="border-b bg-card">
// //         <div className="container mx-auto px-4 py-4 flex items-center justify-between">
// //           <div className="flex items-center gap-3">
// //             <div className="p-2 bg-primary rounded-lg">
// //               <Sprout className="h-6 w-6 text-primary-foreground" />
// //             </div>
// //             <h1 className="text-2xl font-bold text-primary">KrishiMitraAI</h1>
// //           </div>

// //           <div className="flex items-center gap-4">
// //             <div className="flex items-center gap-2 text-sm text-muted-foreground">
// //               <MapPin className="h-4 w-4" />
// //               <span>{currentData.location}</span>
// //             </div>
// //             <Button
// //               variant="outline"
// //               onClick={() => router.push("/?lang=en")}
// //               className="hover:bg-primary hover:text-primary-foreground transition-colors"
// //             >
// //               {t.changeLang}
// //             </Button>
// //           </div>
// //         </div>
// //       </div>

// //       <div className="container mx-auto px-4 py-6">
// //         {/* Tabs */}
// //         <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
// //           <TabsList className="grid w-full grid-cols-2">
// //             <TabsTrigger value="overview" className="flex items-center gap-2">
// //               <Sprout className="h-4 w-4" /> {t.overview}
// //             </TabsTrigger>
// //             <TabsTrigger value="analytics" className="flex items-center gap-2">
// //               <BarChart3 className="h-4 w-4" /> {t.analytics}
// //             </TabsTrigger>
// //           </TabsList>

// //           <TabsContent value="overview">
// //             <div className="grid lg:grid-cols-3 gap-6">
// //               {/* Main */}
// //               <div className="lg:col-span-2 space-y-6">
// //                 {/* Weather */}
// //                 <Card>
// //                   <CardHeader>
// //                     <CardTitle className="flex items-center gap-2">
// //                       <Sun className="h-5 w-5" /> {t.todayWeather}
// //                     </CardTitle>
// //                   </CardHeader>
// //                   <CardContent>
// //                     <div className="grid grid-cols-4 gap-4 text-center">
// //                       <div>
// //                         <Thermometer className="h-8 w-8 text-orange-500 mx-auto mb-2" />
// //                         <p className="text-2xl font-bold">{currentData.weather.temp}</p>
// //                       </div>
// //                       <div>
// //                         <Droplets className="h-8 w-8 text-blue-500 mx-auto mb-2" />
// //                         <p className="text-2xl font-bold">{currentData.weather.humidity}</p>
// //                       </div>
// //                       <div>
// //                         <Wind className="h-8 w-8 text-gray-500 mx-auto mb-2" />
// //                         <p className="text-2xl font-bold">{currentData.weather.wind}</p>
// //                       </div>
// //                       <div>
// //                         <Sun className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
// //                         <p className="text-lg font-bold">{currentData.weather.condition}</p>
// //                       </div>
// //                     </div>
// //                   </CardContent>
// //                 </Card>

// //                 {/* Crop + Land + Season */}
// //                 <Card>
// //                   <CardHeader>
// //                     <CardTitle className="flex items-center gap-2">
// //                       <Sprout className="h-5 w-5" /> {t.selectCrop}
// //                     </CardTitle>
// //                   </CardHeader>
// //                   <CardContent className="space-y-4">
// //                     <Select value={selectedCrop} onValueChange={setSelectedCrop}>
// //                       <SelectTrigger className="w-full">
// //                         <SelectValue placeholder={t.selectCrop} />
// //                       </SelectTrigger>
// //                       <SelectContent>
// //                         {currentData.crops.map((crop: string, i: number) => (
// //                           <SelectItem key={i} value={crop}>
// //                             {crop}
// //                           </SelectItem>
// //                         ))}
// //                       </SelectContent>
// //                     </Select>

// //                     <div className="flex gap-3">
// //                       <Input
// //                         type="number"
// //                         placeholder={t.enterArea}
// //                         value={landArea}
// //                         onChange={(e) => setLandArea(e.target.value)}
// //                       />
// //                       <Select value={landUnit} onValueChange={setLandUnit}>
// //                         <SelectTrigger className="w-32">
// //                           <SelectValue placeholder={t.unit} />
// //                         </SelectTrigger>
// //                         <SelectContent>
// //                           <SelectItem value="acre">{t.acre}</SelectItem>
// //                           <SelectItem value="hectare">{t.hectare}</SelectItem>
// //                           <SelectItem value="sqm">{t.sqm}</SelectItem>
// //                           <SelectItem value="sqft">{t.sqft}</SelectItem>
// //                         </SelectContent>
// //                       </Select>
// //                     </div>

// //                     <Select value={season} onValueChange={setSeason}>
// //                       <SelectTrigger className="w-full">
// //                         <SelectValue placeholder={t.seour} />
// //                       </SelectTrigger>
// //                       <SelectContent>
// //                         <SelectItem value="rabi">{t.rabi}</SelectItem>
// //                         <SelectItem value="kharif">{t.kharif}</SelectItem>
// //                         <SelectItem value="all">{t.all}</SelectItem>
// //                       </SelectContent>
// //                     </Select>

// //                     {selectedCrop && (
// //                       <div className="mt-4 p-4 bg-muted rounded-lg">
// //                         <h4 className="font-semibold mb-2">
// //                           {t.recommendations} - {selectedCrop} ({landArea || "?"} {t[landUnit]}, {t[season]})
// //                         </h4>
// //                         <ul className="space-y-1 text-sm text-muted-foreground">
// //                           {yieldResult && (
// //                             <li>‚Ä¢ {t.yield || "Yield"}: {yieldResult.yield.toFixed(2)} tons/ha</li>
// //                           )}
// //                           {yieldResult && (
// //                             <li>‚Ä¢ {t.production || "Production"}: {yieldResult.production.toFixed(2)} tons</li>
// //                           )}
// //                           {fertilizerResult && (
// //                             <li>‚Ä¢ {t.fertilizer || "Fertilizer"}: {fertilizerResult}</li>
// //                           )}
// //                           {!yieldResult && !fertilizerResult && (
// //                             <li className="text-gray-500">Click below to fetch predictions</li>
// //                           )}
// //                         </ul>
// //                         <Button onClick={fetchPredictions} className="mt-3">
// //                           Get Predictions
// //                         </Button>
// //                       </div>
// //                     )}
// //                   </CardContent>
// //                 </Card>
// //               </div>

// //               {/* Sidebar */}
// //               <div className="space-y-6">
// //                 <VoiceChatbot language={language} />
// //                 <Card>
// //                   <CardHeader>
// //                     <CardTitle className="flex items-center gap-2">
// //                       <Calendar className="h-5 w-5" /> {t.thisWeek || "This Week"}
// //                     </CardTitle>
// //                   </CardHeader>
// //                   <CardContent className="space-y-4">
// //                     <div className="flex justify-between">
// //                       <span>{t.rainyDays || "Rainy Days"}</span>
// //                       <span className="font-semibold">3</span>
// //                     </div>
// //                     <div className="flex justify-between">
// //                       <span>{t.avgTemp || "Avg Temp"}</span>
// //                       <span className="font-semibold">26¬∞C</span>
// //                     </div>
// //                     <div className="flex justify-between">
// //                       <span>{t.soilMoisture || "Soil Moisture"}</span>
// //                       <span className="font-semibold text-green-600">Good</span>
// //                     </div>
// //                   </CardContent>
// //                 </Card>
// //               </div>
// //             </div>
// //           </TabsContent>

// //           {/* Analytics */}
// //           <TabsContent value="analytics">
// //             <CropAnalytics language={language} selectedCrop={selectedCrop} />
// //           </TabsContent>
// //         </Tabs>
// //       </div>
// //     </div>
// //   )
// // }




// "use client"

// import { useState, useEffect } from "react"
// import { useRouter } from "next/navigation"
// import { Button } from "@/components/ui/button"
// import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
// import { Input } from "@/components/ui/input"
// import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
// import {
//   MapPin,
//   Thermometer,
//   Droplets,
//   Wind,
//   Sun,
//   Sprout,
//   Calendar,
//   BarChart3,
// } from "lucide-react"
// import VoiceChatbot from "@/components/voice-chatbot"
// import CropAnalytics from "@/components/crop-analytics"

// // üåç Location + Crops + Weather for all 8 languages
// const locationData: Record<string, any> = {
//   en: {
//     location: "Delhi, India",
//     weather: { temp: "28¬∞C", humidity: "65%", wind: "12 km/h", condition: "Sunny" },
//     crops: ["Wheat", "Rice", "Maize", "Mustard", "Sugarcane", "Sorghum"],
//   },
//   hi: { location: "‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä, ‡§≠‡§æ‡§∞‡§§", weather: { temp: "28¬∞C", humidity: "65%", wind: "12 km/h", condition: "‡§ß‡•Ç‡§™" }, crops: ["‡§ó‡•á‡§π‡•Ç‡§Ç", "‡§ß‡§æ‡§®", "‡§Æ‡§ï‡•ç‡§ï‡§æ", "‡§∏‡§∞‡§∏‡•ã‡§Ç", "‡§ó‡§®‡•ç‡§®‡§æ", "‡§ú‡•ç‡§µ‡§æ‡§∞"] },
//   bn: { location: "‡¶¢‡¶æ‡¶ï‡¶æ, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂", weather: { temp: "26¬∞C", humidity: "72%", wind: "10 km/h", condition: "‡¶∞‡ßå‡¶¶‡ßç‡¶∞‡ßã‡¶ú‡ßç‡¶ú‡ßç‡¶¨‡¶≤" }, crops: ["‡¶ß‡¶æ‡¶®", "‡¶ó‡¶Æ", "‡¶≠‡ßÅ‡¶ü‡ßç‡¶ü‡¶æ", "‡¶™‡¶æ‡¶ü", "‡¶Ü‡¶ñ", "‡¶∏‡¶∞‡¶ø‡¶∑‡¶æ"] },
//   te: { location: "‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç, ‡∞≠‡∞æ‡∞∞‡∞§‡∞¶‡±á‡∞∂‡∞Ç", weather: { temp: "30¬∞C", humidity: "60%", wind: "15 km/h", condition: "‡∞é‡∞Ç‡∞°" }, crops: ["‡∞¨‡∞ø‡∞Ø‡±ç‡∞Ø‡∞Ç", "‡∞ó‡±ã‡∞ß‡±Å‡∞Æ‡∞≤‡±Å", "‡∞Æ‡±ä‡∞ï‡±ç‡∞ï‡∞ú‡±ä‡∞®‡±ç‡∞®", "‡∞™‡∞§‡±ç‡∞§‡∞ø", "‡∞ö‡±Ü‡∞∞‡∞ï‡±Å", "‡∞ú‡±ä‡∞®‡±ç‡∞®"] },
//   ta: { location: "‡Æö‡ØÜ‡Æ©‡Øç‡Æ©‡Øà, ‡Æá‡Æ®‡Øç‡Æ§‡Æø‡ÆØ‡Ææ", weather: { temp: "32¬∞C", humidity: "70%", wind: "14 km/h", condition: "‡Æµ‡ØÜ‡ÆØ‡Æø‡Æ≤‡Øç" }, crops: ["‡ÆÖ‡Æ∞‡Æø‡Æö‡Æø", "‡Æï‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øà", "‡Æö‡Øã‡Æ≥‡ÆÆ‡Øç", "‡Æï‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ", "‡Æ™‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æø", "‡Æö‡Øã‡ÆØ‡Ææ‡Æ™‡ØÄ‡Æ©‡Øç"] },
//   mr: { location: "‡§™‡•Å‡§£‡•á, ‡§≠‡§æ‡§∞‡§§", weather: { temp: "29¬∞C", humidity: "68%", wind: "11 km/h", condition: "‡§∏‡•Ç‡§∞‡•ç‡§Ø‡§™‡•ç‡§∞‡§ï‡§æ‡§∂" }, crops: ["‡§§‡§æ‡§Ç‡§¶‡•Ç‡§≥", "‡§ó‡§π‡•Ç", "‡§Æ‡§ï‡§æ", "‡§ä‡§∏", "‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®", "‡§ï‡§æ‡§™‡•Ç‡§∏"] },
//   gu: { location: "‡™Ö‡™Æ‡™¶‡™æ‡™µ‡™æ‡™¶, ‡™≠‡™æ‡™∞‡™§", weather: { temp: "31¬∞C", humidity: "62%", wind: "13 km/h", condition: "‡™ß‡´Å‡™™‡™õ‡™æ‡™Ç‡™µ" }, crops: ["‡™ö‡´ã‡™ñ‡™æ", "‡™ó‡™π‡´Å‡™Ç", "‡™Æ‡™ï‡™æ‡™à", "‡™ï‡™™‡™æ‡™∏", "‡™∂‡´á‡™∞‡™°‡´Ä", "‡™ú‡´ç‡™µ‡™æ‡™∞"] },
//   kn: { location: "‡≤¨‡≥Ü‡≤Ç‡≤ó‡≤≥‡≥Ç‡≤∞‡≥Å, ‡≤≠‡≤æ‡≤∞‡≤§", weather: { temp: "27¬∞C", humidity: "75%", wind: "9 km/h", condition: "‡≤¨‡≤ø‡≤∏‡≤ø‡≤≤‡≥Å" }, crops: ["‡≤Ö‡≤ï‡≥ç‡≤ï‡≤ø", "‡≤ó‡≥ã‡≤ß‡≤ø", "‡≤Æ‡≥Ü‡≤ï‡≥ç‡≤ï‡≥Ü‡≤ú‡≥ã‡≤≥", "‡≤π‡≤§‡≥ç‡≤§‡≤ø", "‡≤ï‡≤¨‡≥ç‡≤¨‡≥Å", "‡≤ú‡≥ã‡≤≥"] },
// }

// // üåê Translations
// const labels: any = {
//   en: { changeLang: "Change Language", overview: "Overview", analytics: "Analytics", todayWeather: "Today's Weather", selectCrop: "Select Your Crop", enterArea: "Enter Land Area", unit: "Choose Unit", season: "Choose Season", recommendations: "Recommendations", rabi: "Rabi", kharif: "Kharif", all: "All Season", acre: "Acre", hectare: "Hectare", sqm: "Sq. Meter", sqft: "Sq. Feet", yield: "Yield", production: "Production", fertilizer: "Fertilizer" },
//   hi: { changeLang: "‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•á‡§Ç", overview: "‡§Ö‡§µ‡§≤‡•ã‡§ï‡§®", analytics: "‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏", todayWeather: "‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ", selectCrop: "‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç", enterArea: "‡§≠‡•Ç‡§Æ‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç", unit: "‡§á‡§ï‡§æ‡§à ‡§ö‡•Å‡§®‡•á‡§Ç", season: "‡§Æ‡•å‡§∏‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç", recommendations: "‡§∏‡•Å‡§ù‡§æ‡§µ", rabi: "‡§∞‡§¨‡•Ä", kharif: "‡§ñ‡§∞‡•Ä‡§´", all: "‡§∏‡§≠‡•Ä ‡§Æ‡•å‡§∏‡§Æ", acre: "‡§è‡§ï‡§°‡§º", hectare: "‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞", sqm: "‡§µ‡§∞‡•ç‡§ó ‡§Æ‡•Ä‡§ü‡§∞", sqft: "‡§µ‡§∞‡•ç‡§ó ‡§´‡•Å‡§ü", yield: "‡§â‡§™‡§ú", production: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®", fertilizer: "‡§â‡§∞‡•ç‡§µ‡§∞‡§ï" },
//   // ... (other languages same way, add yield/production/fertilizer labels)
// }

// export default function Dashboard() {
//   const [selectedCrop, setSelectedCrop] = useState<string>("")
//   const [location, setLocation] = useState<string>("")
//   const [language, setLanguage] = useState<"hi" | "en" | "bn" | "te" | "ta" | "mr" | "gu" | "kn">("en")
//   const [activeTab, setActiveTab] = useState("overview")

//   const [landArea, setLandArea] = useState<string>("")
//   const [landUnit, setLandUnit] = useState<string>("acre")
//   const [season, setSeason] = useState<string>("all")

//   // Results
//   const [yieldResult, setYieldResult] = useState<any | null>(null)
//   const [fertilizerResult, setFertilizerResult] = useState<string>("")

//   const router = useRouter()

//   useEffect(() => {
//     const urlParams = new URLSearchParams(window.location.search)
//     const lang = (urlParams.get("lang") as typeof language) || "en"
//     setLanguage(lang)

//     if (navigator.geolocation) {
//       navigator.geolocation.getCurrentPosition(
//         (position) => {
//           setLocation(`${position.coords.latitude.toFixed(2)}, ${position.coords.longitude.toFixed(2)}`)
//         },
//         () => {
//           setLocation("Delhi, India")
//         },
//       )
//     }
//   }, [])

//   const currentData = locationData[language]
//   const t = labels[language]

//   // ----------------- API CALLS -----------------
//   async function fetchPredictions() {
//     if (!selectedCrop || !landArea) {
//       alert("Please select crop and enter land area")
//       return
//     }

//     try {
//       // Yield Prediction
//       const resYield = await fetch("http://localhost:8000/predict-yield", {
//         method: "POST",
//         headers: { "Content-Type": "application/json" },
//         body: JSON.stringify({
//           state: "Delhi",
//           district: "New Delhi",
//           year: 2025,
//           season,
//           crop: selectedCrop,
//           area: parseFloat(landArea),
//         }),
//       })

//       if (!resYield.ok) throw new Error(`Yield API failed: ${resYield.status}`)

//       const dataYield = await resYield.json()
//       console.log("‚úÖ Yield API Response:", dataYield)
//       setYieldResult(dataYield)

//       // Fertilizer Recommendation
//       const resFert = await fetch("http://localhost:8000/predict-fertilizer", {
//         method: "POST",
//         headers: { "Content-Type": "application/json" },
//         body: JSON.stringify({
//           state: "Delhi",
//           temperature: 30,
//           humidity: 60,
//           moisture: 40,
//           crop_type: selectedCrop,
//         }),
//       })

//       if (!resFert.ok) throw new Error(`Fertilizer API failed: ${resFert.status}`)

//       const dataFert = await resFert.json()
//       console.log("‚úÖ Fertilizer API Response:", dataFert)
//       setFertilizerResult(dataFert.fertilizer || dataFert.recommendation || "N/A")
//     } catch (err: any) {
//       console.error("‚ùå Backend error:", err.message)
//       alert(`Prediction failed: ${err.message}`)
//     }
//   }

//   return (
//     <div className="min-h-screen bg-background">
//       {/* Header */}
//       <div className="border-b bg-card">
//         <div className="container mx-auto px-4 py-4 flex items-center justify-between">
//           <div className="flex items-center gap-3">
//             <div className="p-2 bg-primary rounded-lg">
//               <Sprout className="h-6 w-6 text-primary-foreground" />
//             </div>
//             <h1 className="text-2xl font-bold text-primary">KrishiMitraAI</h1>
//           </div>

//           <div className="flex items-center gap-4">
//             <div className="flex items-center gap-2 text-sm text-muted-foreground">
//               <MapPin className="h-4 w-4" />
//               <span>{currentData.location}</span>
//             </div>
//             <Button
//               variant="outline"
//               onClick={() => router.push("/?lang=en")}
//               className="hover:bg-primary hover:text-primary-foreground transition-colors"
//             >
//               {t.changeLang}
//             </Button>
//           </div>
//         </div>
//       </div>

//       <div className="container mx-auto px-4 py-6">
//         {/* Tabs */}
//         <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
//           <TabsList className="grid w-full grid-cols-2">
//             <TabsTrigger value="overview" className="flex items-center gap-2">
//               <Sprout className="h-4 w-4" /> {t.overview}
//             </TabsTrigger>
//             <TabsTrigger value="analytics" className="flex items-center gap-2">
//               <BarChart3 className="h-4 w-4" /> {t.analytics}
//             </TabsTrigger>
//           </TabsList>

//           {/* Overview */}
//           <TabsContent value="overview">
//             <div className="grid lg:grid-cols-3 gap-6">
//               {/* Main */}
//               <div className="lg:col-span-2 space-y-6">
//                 {/* Weather */}
//                 <Card>
//                   <CardHeader>
//                     <CardTitle className="flex items-center gap-2">
//                       <Sun className="h-5 w-5" /> {t.todayWeather}
//                     </CardTitle>
//                   </CardHeader>
//                   <CardContent>
//                     <div className="grid grid-cols-4 gap-4 text-center">
//                       <div>
//                         <Thermometer className="h-8 w-8 text-orange-500 mx-auto mb-2" />
//                         <p className="text-2xl font-bold">{currentData.weather.temp}</p>
//                       </div>
//                       <div>
//                         <Droplets className="h-8 w-8 text-blue-500 mx-auto mb-2" />
//                         <p className="text-2xl font-bold">{currentData.weather.humidity}</p>
//                       </div>
//                       <div>
//                         <Wind className="h-8 w-8 text-gray-500 mx-auto mb-2" />
//                         <p className="text-2xl font-bold">{currentData.weather.wind}</p>
//                       </div>
//                       <div>
//                         <Sun className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
//                         <p className="text-lg font-bold">{currentData.weather.condition}</p>
//                       </div>
//                     </div>
//                   </CardContent>
//                 </Card>

//                 {/* Crop + Land + Season */}
//                 <Card>
//                   <CardHeader>
//                     <CardTitle className="flex items-center gap-2">
//                       <Sprout className="h-5 w-5" /> {t.selectCrop}
//                     </CardTitle>
//                   </CardHeader>
//                   <CardContent className="space-y-4">
//                     <Select value={selectedCrop} onValueChange={setSelectedCrop}>
//                       <SelectTrigger className="w-full">
//                         <SelectValue placeholder={t.selectCrop} />
//                       </SelectTrigger>
//                       <SelectContent>
//                         {currentData.crops.map((crop: string, i: number) => (
//                           <SelectItem key={i} value={crop}>
//                             {crop}
//                           </SelectItem>
//                         ))}
//                       </SelectContent>
//                     </Select>

//                     <div className="flex gap-3">
//                       <Input
//                         type="number"
//                         placeholder={t.enterArea}
//                         value={landArea}
//                         onChange={(e) => setLandArea(e.target.value)}
//                       />
//                       <Select value={landUnit} onValueChange={setLandUnit}>
//                         <SelectTrigger className="w-32">
//                           <SelectValue placeholder={t.unit} />
//                         </SelectTrigger>
//                         <SelectContent>
//                           <SelectItem value="acre">{t.acre}</SelectItem>
//                           <SelectItem value="hectare">{t.hectare}</SelectItem>
//                           <SelectItem value="sqm">{t.sqm}</SelectItem>
//                           <SelectItem value="sqft">{t.sqft}</SelectItem>
//                         </SelectContent>
//                       </Select>
//                     </div>

//                     <Select value={season} onValueChange={setSeason}>
//                       <SelectTrigger className="w-full">
//                         <SelectValue placeholder={t.season} />
//                       </SelectTrigger>
//                       <SelectContent>
//                         <SelectItem value="rabi">{t.rabi}</SelectItem>
//                         <SelectItem value="kharif">{t.kharif}</SelectItem>
//                         <SelectItem value="all">{t.all}</SelectItem>
//                       </SelectContent>
//                     </Select>

//                     {selectedCrop && (
//                       <div className="mt-4 p-4 bg-muted rounded-lg">
//                         <h4 className="font-semibold mb-2">
//                           {t.recommendations} - {selectedCrop} ({landArea || "?"} {t[landUnit]}, {t[season]})
//                         </h4>
//                         <ul className="space-y-1 text-sm text-muted-foreground">
//                           {yieldResult && (
//                             <>
//                               <li>‚Ä¢ {t.yield}: {(yieldResult.yield || yieldResult.predicted_yield || 0).toFixed(2)} tons/ha</li>
//                               <li>‚Ä¢ {t.production}: {(yieldResult.production || yieldResult.predicted_production || 0).toFixed(2)} tons</li>
//                             </>
//                           )}
//                           {fertilizerResult && (
//                             <li>‚Ä¢ {t.fertilizer}: {fertilizerResult}</li>
//                           )}
//                           {!yieldResult && !fertilizerResult && (
//                             <li className="text-gray-500">Click below to fetch predictions</li>
//                           )}
//                         </ul>
//                         <Button onClick={fetchPredictions} className="mt-3">
//                           Get Predictions
//                         </Button>
//                       </div>
//                     )}
//                   </CardContent>
//                 </Card>
//               </div>

//               {/* Sidebar */}
//               <div className="space-y-6">
//                 <VoiceChatbot language={language} />
//                 <Card>
//                   <CardHeader>
//                     <CardTitle className="flex items-center gap-2">
//                       <Calendar className="h-5 w-5" /> {t.thisWeek || "This Week"}
//                     </CardTitle>
//                   </CardHeader>
//                   <CardContent className="space-y-4">
//                     <div className="flex justify-between">
//                       <span>{t.rainyDays || "Rainy Days"}</span>
//                       <span className="font-semibold">3</span>
//                     </div>
//                     <div className="flex justify-between">
//                       <span>{t.avgTemp || "Avg Temp"}</span>
//                       <span className="font-semibold">26¬∞C</span>
//                     </div>
//                     <div className="flex justify-between">
//                       <span>{t.soilMoisture || "Soil Moisture"}</span>
//                       <span className="font-semibold text-green-600">Good</span>
//                     </div>
//                   </CardContent>
//                 </Card>
//               </div>
//             </div>
//           </TabsContent>

//           {/* Analytics */}
//           <TabsContent value="analytics">
//             <CropAnalytics language={language} selectedCrop={selectedCrop} />
//           </TabsContent>
//         </Tabs>
//       </div>
//     </div>
//   )
// }



"use client"

import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  MapPin,
  Thermometer,
  Droplets,
  Wind,
  Sun,
  Sprout,
  BarChart3,
  Leaf,
  FlaskConical,
  AreaChart,
} from "lucide-react"
import VoiceChatbot from "@/components/voice-chatbot"
import CropAnalytics from "@/components/crop-analytics"
import {
  getHealthCheck,
  getLocationDetails,
  predictYield,
  recommendCrop,
  recommendFertilizer,
} from "@/lib/api"
import { useToast } from "@/components/ui/use-toast"

// Mock data for crops and seasons, can be replaced with API data if available
const crops = ["Rice", "Wheat", "Maize", "Mustard", "Sugarcane", "Sorghum", "Cotton", "Soyabean", "Groundnut"]
const seasons = ["Kharif", "Rabi", "Zaid", "Whole Year"]

export default function Dashboard() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { toast } = useToast()

  // UI State
  const [activeTab, setActiveTab] = useState("overview")
  const [language, setLanguage] = useState("en")

  // Location & Weather State
  const [location, setLocation] = useState<{ lat: number; lon: number } | null>(null)
  const [locationDetails, setLocationDetails] = useState<any>(null)
  const [isLoadingLocation, setIsLoadingLocation] = useState(true)

  // Form Inputs
  const [selectedCrop, setSelectedCrop] = useState<string>("")
  const [selectedSeason, setSelectedSeason] = useState<string>("")
  const [areaHectares, setAreaHectares] = useState<string>("")

  // API Results
  const [recommendedCrop, setRecommendedCrop] = useState<string>("")
  const [yieldPrediction, setYieldPrediction] = useState<any>(null)
  const [fertilizerRecommendation, setFertilizerRecommendation] = useState<string>("")

  useEffect(() => {
    const lang = searchParams.get("lang") || "en"
    setLanguage(lang)

    // 1. Get Health Status
    getHealthCheck()
      .then(() => {
        toast({ title: "API Status", description: "API is healthy and running!" })
      })
      .catch(() => {
        toast({
          title: "API Status",
          description: "API is not reachable.",
          variant: "destructive",
        })
      })

    // 2. Get Geolocation
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords
          setLocation({ lat: latitude, lon: longitude })
        },
        () => {
          setIsLoadingLocation(false)
          toast({
            title: "Location Error",
            description: "Could not access your location. Please enable location services.",
            variant: "destructive",
          })
        }
      )
    } else {
      setIsLoadingLocation(false)
      toast({
        title: "Location Error",
        description: "Geolocation is not supported by your browser.",
        variant: "destructive",
      })
    }
  }, [searchParams, toast])

  // 3. Fetch location details once location is available
  useEffect(() => {
    if (location) {
      setIsLoadingLocation(true)
      getLocationDetails(location.lat, location.lon)
        .then((data) => {
          setLocationDetails(data)
          setIsLoadingLocation(false)
        })
        .catch(() => {
          setIsLoadingLocation(false)
          toast({
            title: "API Error",
            description: "Failed to fetch location and weather details.",
            variant: "destructive",
          })
        })
    }
  }, [location, toast])

  // --- API Handlers ---

  const handleRecommendCrop = async () => {
    if (!location) return
    try {
      const data = await recommendCrop({ latitude: location.lat, longitude: location.lon })
      setRecommendedCrop(data.recommended_crop)
      toast({
        title: "Crop Recommendation",
        description: `We recommend planting: ${data.recommended_crop}`,
      })
    } catch (error) {
      toast({
        title: "API Error",
        description: "Failed to get crop recommendation.",
        variant: "destructive",
      })
    }
  }

  const handlePredictYield = async () => {
    if (!location || !selectedCrop || !selectedSeason || !areaHectares) {
      toast({
        title: "Input Error",
        description: "Please select a crop, season, and enter the area.",
        variant: "destructive",
      })
      return
    }
    try {
      const data = await predictYield({
        latitude: location.lat,
        longitude: location.lon,
        crop: selectedCrop,
        season: selectedSeason,
        area_hectares: parseFloat(areaHectares),
      })
      setYieldPrediction(data)
      toast({
        title: "Yield Prediction",
        description: "Prediction successful!",
      })
    } catch (error) {
      toast({
        title: "API Error",
        description: "Failed to predict yield.",
        variant: "destructive",
      })
    }
  }

  const handleRecommendFertilizer = async () => {
    if (!location || !selectedCrop) {
      toast({
        title: "Input Error",
        description: "Please select a crop.",
        variant: "destructive",
      })
      return
    }
    try {
      const data = await recommendFertilizer({
        latitude: location.lat,
        longitude: location.lon,
        crop_type: selectedCrop,
      })
      setFertilizerRecommendation(data.recommended_fertilizer)
      toast({
        title: "Fertilizer Recommendation",
        description: `Recommended fertilizer: ${data.recommended_fertilizer}`,
      })
    } catch (error) {
      toast({
        title: "API Error",
        description: "Failed to get fertilizer recommendation.",
        variant: "destructive",
      })
    }
  }

  const locationName = locationDetails
    ? `${locationDetails.geography.city}, ${locationDetails.geography.state}`
    : "Loading location..."

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b bg-card">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-primary rounded-lg">
              <Sprout className="h-6 w-6 text-primary-foreground" />
            </div>
            <h1 className="text-2xl font-bold text-primary">KrishiMitraAI</h1>
          </div>
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <MapPin className="h-4 w-4" />
              <span>{isLoadingLocation ? "Fetching location..." : locationName}</span>
            </div>
            <Button variant="outline" onClick={() => router.push("/")}>
              Change Language
            </Button>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="overview" className="flex items-center gap-2">
              <Sprout className="h-4 w-4" /> Overview
            </TabsTrigger>
            <TabsTrigger value="analytics" className="flex items-center gap-2">
              <BarChart3 className="h-4 w-4" /> Analytics
            </TabsTrigger>
          </TabsList>

          <TabsContent value="overview">
            <div className="grid lg:grid-cols-3 gap-6">
              {/* Left Column */}
              <div className="lg:col-span-2 space-y-6">
                {/* Weather */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Sun className="h-5 w-5" /> Today's Weather
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    {isLoadingLocation || !locationDetails ? (
                      <p>Loading weather data...</p>
                    ) : (
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                        <div>
                          <Thermometer className="h-8 w-8 text-orange-500 mx-auto mb-2" />
                          <p className="text-2xl font-bold">{locationDetails.weather.temperature_celsius}¬∞C</p>
                          <p className="text-sm text-muted-foreground">Temperature</p>
                        </div>
                        <div>
                          <Droplets className="h-8 w-8 text-blue-500 mx-auto mb-2" />
                          <p className="text-2xl font-bold">{locationDetails.weather.humidity_percent}%</p>
                          <p className="text-sm text-muted-foreground">Humidity</p>
                        </div>
                        <div>
                          <Wind className="h-8 w-8 text-gray-500 mx-auto mb-2" />
                          <p className="text-2xl font-bold">{locationDetails.weather.wind_speed_kmph} km/h</p>
                          <p className="text-sm text-muted-foreground">Wind</p>
                        </div>
                        <div>
                          <Sun className="h-8 w-8 text-yellow-500 mx-auto mb-2" />
                          <p className="text-lg font-bold capitalize">{locationDetails.weather.condition}</p>
                          <p className="text-sm text-muted-foreground">Condition</p>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>

                {/* Predictions */}
                <Card>
                  <CardHeader>
                    <CardTitle>Predictions & Recommendations</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {/* Inputs */}
                    <div className="grid md:grid-cols-3 gap-4">
                      <Select value={selectedCrop} onValueChange={setSelectedCrop}>
                        <SelectTrigger><SelectValue placeholder="Select Crop" /></SelectTrigger>
                        <SelectContent>{crops.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}</SelectContent>
                      </Select>
                      <Select value={selectedSeason} onValueChange={setSelectedSeason}>
                        <SelectTrigger><SelectValue placeholder="Select Season" /></SelectTrigger>
                        <SelectContent>{seasons.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}</SelectContent>
                      </Select>
                      <Input
                        type="number"
                        placeholder="Area in Hectares"
                        value={areaHectares}
                        onChange={(e) => setAreaHectares(e.target.value)}
                      />
                    </div>
                    {/* Actions */}
                    <div className="flex flex-wrap gap-3">
                      <Button onClick={handleRecommendCrop}><Leaf className="mr-2 h-4 w-4" /> Recommend Crop</Button>
                      <Button onClick={handlePredictYield}><AreaChart className="mr-2 h-4 w-4" /> Predict Yield</Button>
                      <Button onClick={handleRecommendFertilizer}><FlaskConical className="mr-2 h-4 w-4" /> Recommend Fertilizer</Button>
                    </div>
                    {/* Results */}
                    <div className="space-y-2 pt-4">
                      {recommendedCrop && <p><strong>Recommended Crop:</strong> {recommendedCrop}</p>}
                      {fertilizerRecommendation && <p><strong>Recommended Fertilizer:</strong> {fertilizerRecommendation}</p>}
                      {yieldPrediction && (
                        <div>
                          <p><strong>Predicted Yield:</strong> {yieldPrediction.predicted_yield_tons_per_hectare.toFixed(2)} tons/hectare</p>
                          <p><strong>Total Production:</strong> {yieldPrediction.predicted_total_production_tons.toFixed(2)} tons</p>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Right Column */}
              <div className="space-y-6">
                <VoiceChatbot language={language} />
                {/* You can add more cards here if needed */}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="analytics">
            <CropAnalytics language={language} selectedCrop={selectedCrop} />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
