# -*- coding: utf-8 -*-
"""fert_quantity_pred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CDBWsd3fSPefWhn9xKLbBVsjpeQGvgTO
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import r2_score, mean_squared_error
from xgboost import XGBRegressor

# Load datasets
fert = pd.read_csv("Best amt of Fertiliser.csv")   # Fertilizer, temp, N, P, K, yeild
nutr = pd.read_csv("nutrients by state.csv")

# Compute nutrient indices per state
def nutrient_index(low, med, high, total):
    if total == 0: return np.nan
    return (1*(low/total) + 2*(med/total) + 3*(high/total))

nutr["N_index"] = nutr.apply(lambda r: nutrient_index(r["Nitrogen(N)-Low"], r["Nitrogen (N) - M"], r["Nitrogen(N) - High"], r["Total No. of Samples"]), axis=1)
nutr["P_index"] = nutr.apply(lambda r: nutrient_index(r["Phosphorous(P) - Low"], r["Phosphorous (P) - M"], r["Phosphorous(P) - High"], r["Total No. of Samples"]), axis=1)
nutr["K_index"] = nutr.apply(lambda r: nutrient_index(r["Potassium(K) - Low"], r["Potassium (K) - M"], r["Potassium(K) - High"], r["Total No. of Samples"]), axis=1)

nutr = nutr[["State/UT", "N_index", "P_index", "K_index"]]

# Training dataset (use N,P,K directly from fert dataset as proxy for state nutrient indices)
df = fert.copy()
df["State"] = "Synthetic"  # placeholder, no state info in this dataset

X = df[["State", "temp", "N", "P", "K", "yeild"]]
y = df["Fertilizer"]

categorical = ["State"]
numeric = ["temp","N","P","K","yeild"]

preprocessor = ColumnTransformer([
    ("cat", OneHotEncoder(handle_unknown="ignore"), categorical),
    ("num", "passthrough", numeric)
])

model = XGBRegressor(n_estimators=300, learning_rate=0.1, max_depth=6,
                     subsample=0.8, colsample_bytree=0.8, random_state=42)

pipeline = Pipeline([("preprocessor", preprocessor), ("model", model)])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
pipeline.fit(X_train, y_train)

y_pred = pipeline.predict(X_test)
print("RÂ²:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

def recommend_fertilizer_quantity(state, temp, humidity, moisture, crop, yield_val):
    row = nutr[nutr["State/UT"]==state]
    if row.empty: raise ValueError("State not found")
    N_index, P_index, K_index = row.iloc[0][["N_index","P_index","K_index"]]
    sample = pd.DataFrame([{
        "State": "Synthetic",  # since fert data has no real state
        "temp": temp,
        "N": N_index*40,   # scale indices to approximate numeric N,P,K
        "P": P_index*15,
        "K": K_index*20,
        "yeild": yield_val
    }])
    return round(max(0, pipeline.predict(sample)[0]),2)

print("Recommendation:", recommend_fertilizer_quantity("Bihar", 28, 65, 40, "Rice", 12), "kg/ha")