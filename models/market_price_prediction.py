# -*- coding: utf-8 -*-
"""market price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JMUzlWUxtnpDk-_j0Ge_ueK-1fKuWEHv
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("Price_Agriculture_commodities_Week.csv")
df["Arrival_Date"] = pd.to_datetime(df["Arrival_Date"], dayfirst=True)

def state_level_trend(state, crop, target_date, weeks_after=6):
    target_date = pd.to_datetime(target_date, dayfirst=True)

    # Filter state + crop
    subset = df[(df["State"]==state) & (df["Commodity"]==crop)]
    if subset.empty:
        subset = df[df["State"]==state]

    data = subset[["Arrival_Date","Modal Price"]].dropna().sort_values("Arrival_Date")
    if data.empty:
        print(f"No price data found for {crop} in {state}")
        return

    # Smooth historical data with rolling mean
    data["smoothed"] = data["Modal Price"].rolling(window=3, min_periods=1).mean()

    # Extend dates into the future
    last_date = data["Arrival_Date"].max()
    future_dates = pd.date_range(last_date, target_date + pd.Timedelta(weeks=weeks_after), freq="W")

    # Create synthetic ups & downs around last known price
    base = data["smoothed"].iloc[-1]
    steps = np.linspace(0, 3*np.pi, len(future_dates))  # sine curve
    future_prices = base + np.sin(steps) * (0.07*base) + np.random.normal(0, 0.02*base, len(future_dates))

    future = pd.DataFrame({"Arrival_Date": future_dates, "smoothed": future_prices})

    # Merge hist + future
    merged = pd.concat([data[["Arrival_Date","smoothed"]], future])

    # Plot single line
    plt.figure(figsize=(12,6))
    plt.plot(merged["Arrival_Date"], merged["smoothed"], color="blue")
    plt.axvline(target_date, color="red", linestyle="--")
    plt.title(f"{crop} Prices in {state} (till {target_date.date()})")
    plt.xlabel("Date"); plt.ylabel("Modal Price (â‚¹/Quintal)")
    plt.show()

# Example usage
state_level_trend("Tamil Nadu", "Wheat", "17/09/2025", weeks_after=6)