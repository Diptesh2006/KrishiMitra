# -*- coding: utf-8 -*-
"""yield_pred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s_E3b9V4MBmgfxiiTPvGcjv_Aq3J5axd
"""

import pandas as pd
from pathlib import Path
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import r2_score, mean_squared_error
from xgboost import XGBRegressor
import numpy as np
import joblib

current_file_path = Path(__file__)
project_root = current_file_path.parent.parent
data_path = project_root / "datasets" / "crop_production.csv"
df = pd.read_csv(data_path)

df = df.dropna(subset=["Area", "Production"])
df = df[df["Area"] > 0]
df["Yield"] = df["Production"] / df["Area"]

X = df[["State_Name", "District_Name", "Crop_Year", "Season", "Crop", "Area"]]
y = df["Yield"]

categorical = ["State_Name", "District_Name", "Season", "Crop"]
numeric = ["Crop_Year", "Area"]

preprocessor = ColumnTransformer(
    transformers=[
        ("cat", OneHotEncoder(handle_unknown="ignore"), categorical),
        ("num", "passthrough", numeric)
    ]
)

model = XGBRegressor(
    n_estimators=300,
    learning_rate=0.1,
    max_depth=7,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)

pipeline = Pipeline(steps=[
    ("preprocessor", preprocessor),
    ("model", model)
])

df["Log_Yield"] = np.log1p(df["Yield"])  # log(1+Yield)

y = df["Log_Yield"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Train the model
pipeline.fit(X_train, y_train)

y_pred = pipeline.predict(X_test)

print("RÂ² Score:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

sample = pd.DataFrame([{
    "State_Name": "Andaman and Nicobar Islands",
    "District_Name": "NICOBARS",
    "Crop_Year": 2025,
    "Season": "Rabi",
    "Crop": "Rice",
    "Area": 40
}])

pred_yield = pipeline.predict(sample)[0]
print("Predicted Yield (tons per ha):", pred_yield)
print("Predicted Production (tons):", pred_yield * sample["Area"].values[0])


joblib.dump(pipeline, "crop_yield_pipeline.joblib")
print("Pipeline saved as crop_yield_pipeline.joblib")